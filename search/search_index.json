{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83d\udc4b Selamat Datang di Modul Belajar Python Delta_Code.id","text":"<p>\u201cBelajar Python, biar hidupmu gak cuma error tapi bisa nge-debug masa depan \ud83d\ude0e\u201d</p> <p></p>"},{"location":"#tentang-proyek-ini","title":"\ud83d\ude80 Tentang Proyek Ini","text":"<p>Halo! Ini adalah seri dokumentasi belajar Python khusus buat kamu yang:</p> <ul> <li>Baru mulai ngoding</li> <li>Penasaran sama Python tapi gak tahu mulai dari mana</li> <li>Suka belajar step-by-step, dari dasar sampai expert</li> </ul> <p>Disusun dengan \u2764\ufe0f oleh Marno, Mahasiswa TI sekaligus pejuang sawit sejati \ud83c\udf34\ud83d\udcbb</p>"},{"location":"#daftar-isi-modul","title":"\ud83d\udcda Daftar Isi Modul","text":"<p>Kamu bisa langsung klik salah satu modul di sidebar atau pilih dari daftar di bawah:</p> <ul> <li>Modul 1 - Pengenalan Python</li> <li>Modul 2 - Variabel dan Tipe Data</li> <li>Modul 3 - Operasi Dasar</li> <li>Modul 4 - Percabangan</li> <li>Modul 5 - Perulangan</li> <li>(lanjut sampai Modul 30 ya capek juga ngetiknya manual \ud83e\udd23)</li> </ul>"},{"location":"#kutipan-random-buat-semangat","title":"\ud83e\udd2f Kutipan Random Buat Semangat","text":"<p>\u201cProgrammer itu kayak petani sawit. Panen hasilnya butuh sabar, tapi begitu dapet, rasanya manis juga.\u201d \u2014 Anak TI Galau</p> <p>\u201cKalau kamu gagal debug, bukan salah Python. Mungkin kamu ngoding sambil nahan ngantuk.\u201d \u2014 Marno, 2025</p> <p>\u201cError itu bukan akhir. Itu cuma Python ngajak diskusi.\u201d</p>"},{"location":"#powered-by","title":"\u2728 Powered by","text":"<ul> <li>DELTA_CODE.ID</li> <li>Python</li> <li>MkDocs</li> <li>Material for MkDocs</li> </ul>"},{"location":"API%20%26%20Web%20Development/","title":"\ud83c\udf10 API &amp; Web Development dengan Python","text":"<p>Python punya banyak framework powerful buat bikin API dan website, seperti Flask dan Django. Di sini, kita bakal bahas cara bikin REST API dan website sederhana dengan Python.  </p>"},{"location":"API%20%26%20Web%20Development/#1-rest-api-dengan-flask","title":"\ud83d\ude80 1. REST API dengan Flask","text":"<p>API (Application Programming Interface) memungkinkan aplikasi berkomunikasi satu sama lain. Kita bisa bikin API di Python pakai Flask.  </p> <p>\ud83d\udccc Install Flask dulu </p> <pre><code>pip install flask\n</code></pre>"},{"location":"API%20%26%20Web%20Development/#contoh-rest-api-sederhana-dengan-flask","title":"\ud83d\udd39 Contoh: REST API Sederhana dengan Flask","text":"<pre><code>from flask import Flask, jsonify, request\n\napp = Flask(__name__)\n\n# Data contoh\nusers = [\n    {\"id\": 1, \"nama\": \"Adit\", \"umur\": 25},\n    {\"id\": 2, \"nama\": \"Budi\", \"umur\": 30}\n]\n\n# Endpoint GET (Ambil Data)\n@app.route(\"/users\", methods=[\"GET\"])\ndef get_users():\n    return jsonify(users)\n\n# Endpoint POST (Tambah Data)\n@app.route(\"/users\", methods=[\"POST\"])\ndef add_user():\n    data = request.json\n    users.append({\"id\": len(users) + 1, \"nama\": data[\"nama\"], \"umur\": data[\"umur\"]})\n    return jsonify({\"message\": \"User ditambahkan!\"})\n\nif __name__ == \"__main__\":\n    app.run(debug=True)\n</code></pre> <p>\ud83d\udccc Coba jalankan server: </p> <pre><code>python nama_file.py\n</code></pre> <p>Buka browser dan akses <code>http://127.0.0.1:5000/users</code> buat lihat data!  </p>"},{"location":"API%20%26%20Web%20Development/#2-web-development-dengan-flask","title":"\ud83c\udfa8 2. Web Development dengan Flask","text":"<p>Flask juga bisa dipakai buat bikin website dengan HTML &amp; CSS.  </p> <p>\ud83d\udccc Buat struktur folder: </p> <pre><code>/project\n  /templates\n    index.html\n  app.py\n</code></pre>"},{"location":"API%20%26%20Web%20Development/#file-apppy-kode-flask-nya","title":"\ud83d\udd39 File <code>app.py</code> (Kode Flask-nya)","text":"<pre><code>from flask import Flask, render_template\n\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef home():\n    return render_template(\"index.html\")\n\nif __name__ == \"__main__\":\n    app.run(debug=True)\n</code></pre>"},{"location":"API%20%26%20Web%20Development/#file-templatesindexhtml-html-nya","title":"\ud83d\udd39 File <code>templates/index.html</code> (HTML-nya)","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"id\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Flask Website&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Halo, Selamat Datang di Website Flask!&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>\ud83d\udccc Jalankan Flask dan buka <code>http://127.0.0.1:5000/</code> buat lihat websitenya! \ud83c\udf89  </p>"},{"location":"API%20%26%20Web%20Development/#3-django-framework-web-yang-lebih-besar","title":"\ud83c\udfd7 3. Django: Framework Web yang Lebih Besar","text":"<p>Kalau butuh framework lebih lengkap (termasuk admin panel otomatis), pakai Django.  </p> <p>\ud83d\udccc Install Django: </p> <pre><code>pip install django\n</code></pre> <p>\ud83d\udccc Buat proyek Django: </p> <pre><code>django-admin startproject myproject\ncd myproject\npython manage.py runserver\n</code></pre> <p>Buka <code>http://127.0.0.1:8000/</code>, Django siap jalan! \ud83d\ude80  </p>"},{"location":"API%20%26%20Web%20Development/#kesimpulan","title":"\ud83c\udfaf Kesimpulan","text":"<p>\u2705 Flask \u2192 Ringan &amp; fleksibel buat API &amp; website kecil. \u2705 Django \u2192 Cocok buat proyek besar dengan fitur lengkap.  </p> <p>Next: Data Science &amp; Machine Learning! \ud83d\ude80</p>"},{"location":"Artificial%20Intelligence%20%26%20Deep%20Learning/","title":"\ud83e\udde0 Artificial Intelligence &amp; Deep Learning dengan Python","text":"<p>AI &amp; Deep Learning adalah cabang dari Machine Learning yang lebih kompleks, sering digunakan untuk pengolahan gambar, suara, NLP (Natural Language Processing), dan lainnya. Python punya banyak library powerful seperti TensorFlow, PyTorch, dan OpenCV buat ini!  </p>"},{"location":"Artificial%20Intelligence%20%26%20Deep%20Learning/#1-install-library-yang-dibutuhkan","title":"\u2699\ufe0f 1. Install Library yang Dibutuhkan","text":"<pre><code>pip install tensorflow keras torch torchvision opencv-python\n</code></pre> <p>\ud83d\udccc <code>tensorflow</code> &amp; <code>keras</code> \u2192 Untuk deep learning \ud83d\udccc <code>torch &amp; torchvision</code> \u2192 Untuk model AI berbasis PyTorch \ud83d\udccc <code>opencv-python</code> \u2192 Untuk pemrosesan gambar  </p>"},{"location":"Artificial%20Intelligence%20%26%20Deep%20Learning/#2-membuat-model-neural-network-sederhana","title":"\ud83c\udfcb\ufe0f\u200d\u2642\ufe0f 2. Membuat Model Neural Network Sederhana","text":"<p>\ud83d\udccc Contoh: Prediksi Angka Tulisan Tangan (MNIST) dengan TensorFlow </p> <pre><code>import tensorflow as tf\nfrom tensorflow import keras\nimport numpy as np\n\n# Load dataset MNIST (angka tulisan tangan)\n(X_train, y_train), (X_test, y_test) = keras.datasets.mnist.load_data()\n\n# Normalisasi data\nX_train, X_test = X_train / 255.0, X_test / 255.0\n\n# Buat model neural network\nmodel = keras.Sequential([\n    keras.layers.Flatten(input_shape=(28, 28)),  # Ubah 2D jadi 1D\n    keras.layers.Dense(128, activation=\"relu\"),  # Hidden layer\n    keras.layers.Dense(10, activation=\"softmax\")  # Output layer (10 kelas angka 0-9)\n])\n\n# Compile &amp; latih model\nmodel.compile(optimizer=\"adam\", loss=\"sparse_categorical_crossentropy\", metrics=[\"accuracy\"])\nmodel.fit(X_train, y_train, epochs=5)  # Latih selama 5 epoch\n\n# Evaluasi model\ntest_loss, test_acc = model.evaluate(X_test, y_test)\nprint(f\"Akurasinya: {test_acc:.2f}\")\n</code></pre> <p>\ud83d\udccc Model ini bisa mengenali angka tulisan tangan dari dataset MNIST! \ud83e\udde0  </p>"},{"location":"Artificial%20Intelligence%20%26%20Deep%20Learning/#3-computer-vision-dengan-opencv","title":"\ud83d\uddbc\ufe0f 3. Computer Vision dengan OpenCV","text":"<p>\ud83d\udccc Deteksi wajah pakai OpenCV </p> <pre><code>import cv2\n\n# Load model deteksi wajah\nface_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + \"haarcascade_frontalface_default.xml\")\n\n# Buka kamera\ncap = cv2.VideoCapture(0)\n\nwhile True:\n    ret, frame = cap.read()\n    if not ret:\n        break\n\n    # Ubah gambar ke grayscale\n    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)\n\n    # Deteksi wajah\n    faces = face_cascade.detectMultiScale(gray, 1.3, 5)\n\n    # Gambar kotak di wajah yang terdeteksi\n    for (x, y, w, h) in faces:\n        cv2.rectangle(frame, (x, y), (x+w, y+h), (255, 0, 0), 2)\n\n    # Tampilkan hasilnya\n    cv2.imshow(\"Deteksi Wajah\", frame)\n\n    if cv2.waitKey(1) &amp; 0xFF == ord(\"q\"):\n        break\n\ncap.release()\ncv2.destroyAllWindows()\n</code></pre> <p>\ud83d\udccc Ini bakal mendeteksi wajah secara real-time dari kamera! \ud83c\udfa5  </p>"},{"location":"Artificial%20Intelligence%20%26%20Deep%20Learning/#kesimpulan","title":"\ud83c\udfaf Kesimpulan","text":"<p>\u2705 TensorFlow/Keras \u2192 Buat model AI &amp; Deep Learning \u2705 OpenCV \u2192 Buat pemrosesan gambar &amp; Computer Vision \u2705 PyTorch \u2192 Alternatif TensorFlow untuk AI yang lebih fleksibel  </p> <p>Next: Deployment Model AI ke Web &amp; Mobile! \ud83d\ude80</p>"},{"location":"Best%20Practices%20dalam%20Python%20Programming/","title":"\ud83c\udfc6 Best Practices dalam Python Programming","text":"<p>Setelah belajar semua tentang Python, sekarang waktunya jadi Pythonista sejati dengan menerapkan best practices dalam coding! Ini bakal bikin kode lebih bersih, efisien, dan mudah dipahami.  </p>"},{"location":"Best%20Practices%20dalam%20Python%20Programming/#1-pep-8-panduan-gaya-penulisan-kode-python","title":"\ud83d\udcdd 1. PEP 8: Panduan Gaya Penulisan Kode Python","text":"<p>PEP 8 adalah standar gaya kode Python yang bikin kode lebih rapi dan mudah dibaca.  </p> <p>\ud83d\udccc Contoh yang benar &amp; salah menurut PEP 8: \u274c SALAH: </p> <pre><code>def fungsi(x,y):return x+y\n</code></pre> <p>\u2705 BENAR: </p> <pre><code>def fungsi(x, y):\n    return x + y\n</code></pre> <p>\ud83d\udccc Aturan Dasar PEP 8: - Gunakan 4 spasi untuk indentasi (jangan pakai tab) - Gunakan nama variabel deskriptif (<code>total_harga</code> lebih baik daripada <code>x</code>) - Tambahkan spasi di sekitar operator (<code>x + y</code>, bukan <code>x+y</code>) - Gunakan snake_case untuk variabel &amp; fungsi (<code>jumlah_barang</code>, bukan <code>JumlahBarang</code>) - Gunakan PascalCase untuk nama kelas (<code>NamaKelas</code>)  </p> <p>\ud83d\udccc Cek kode otomatis pakai <code>flake8</code> atau <code>black</code> </p> <pre><code>pip install flake8 black\nflake8 myscript.py  # Cek kesalahan gaya kode\nblack myscript.py   # Auto-format kode biar rapi\n</code></pre>"},{"location":"Best%20Practices%20dalam%20Python%20Programming/#2-efisiensi-kode-dengan-list-comprehension","title":"\u26a1 2. Efisiensi Kode dengan List Comprehension","text":"<p>\ud83d\udccc Cara lama (Kurang Efisien) </p> <pre><code>angka = []\nfor i in range(10):\n    angka.append(i * 2)\n</code></pre> <p>\ud83d\udccc Cara Pythonic (List Comprehension) </p> <pre><code>angka = [i * 2 for i in range(10)]\n</code></pre> <p>\u2705 Hasil sama, tapi lebih singkat &amp; cepat! </p>"},{"location":"Best%20Practices%20dalam%20Python%20Programming/#3-gunakan-f-string-untuk-formatting-string","title":"\ud83c\udff7\ufe0f 3. Gunakan F-String untuk Formatting String","text":"<p>\ud83d\udccc Cara lama (Kurang efisien) </p> <pre><code>nama = \"Adit\"\numur = 25\nprint(\"Halo, nama saya \" + nama + \" dan saya \" + str(umur) + \" tahun.\")  \n</code></pre> <p>\ud83d\udccc Cara Pythonic dengan F-String </p> <pre><code>print(f\"Halo, nama saya {nama} dan saya {umur} tahun.\")  \n</code></pre> <p>\u2705 Lebih rapi, lebih cepat, lebih mudah dibaca! </p>"},{"location":"Best%20Practices%20dalam%20Python%20Programming/#4-error-handling-yang-baik","title":"\ud83d\udee0\ufe0f 4. Error Handling yang Baik","text":"<p>\ud83d\udccc Tangkap error dengan <code>try-except</code> supaya program tidak crash </p> <pre><code>try:\n    angka = int(input(\"Masukkan angka: \"))\n    print(10 / angka)\nexcept ValueError:\n    print(\"Input harus angka!\")\nexcept ZeroDivisionError:\n    print(\"Tidak bisa membagi dengan nol!\")\nfinally:\n    print(\"Program selesai.\")\n</code></pre> <p>\u2705 Pastikan program tetap berjalan walaupun ada error! </p>"},{"location":"Best%20Practices%20dalam%20Python%20Programming/#kesimpulan","title":"\ud83c\udfaf Kesimpulan","text":"<p>\u2705 Gunakan PEP 8 buat kode yang rapi &amp; profesional \u2705 Manfaatkan List Comprehension &amp; F-String buat efisiensi \u2705 Tangani error dengan baik supaya program tidak mudah crash  </p> <p>Next: Python untuk Otomasi! \ud83d\ude80</p>"},{"location":"Daftar%20Isi/","title":"Daftar Isi","text":""},{"location":"Daftar%20Isi/#daftar-isi-buku-python-dari-dasar-sampai-mahir","title":"\ud83d\udcd8 Daftar Isi Buku \"PYTHON: Dari Dasar Sampai Mahir\"","text":""},{"location":"Daftar%20Isi/#bagian-1-pemanasan-dulu-level-beginner","title":"\ud83d\udc0d Bagian 1: Pemanasan Dulu (Level: Beginner)","text":"<ol> <li>Apa Itu Python? </li> <li>Sejarah singkat &amp; kenapa Python hype banget  </li> <li> <p>Kelebihan Python buat semua kalangan  </p> </li> <li> <p>Instalasi &amp; Setup </p> </li> <li>Install Python (Windows/Linux/Mac)  </li> <li>IDE vs Text Editor (IDLE, VSCode, PyCharm)  </li> <li> <p>Hello World pertamamu \ud83c\udf89</p> </li> <li> <p>Sintaks Dasar Python </p> </li> <li>Variabel &amp; Tipe Data  </li> <li>Operator (Aritmatika, Perbandingan, Logika)  </li> <li> <p>Input &amp; Output (biar bisa ngobrol ama user)</p> </li> <li> <p>Kontrol Alur Program </p> </li> <li>If-Else: Logika kehidupan \ud83d\ude0e  </li> <li>Looping (For &amp; While)  </li> <li> <p>Break, Continue, Pass  </p> </li> <li> <p>Fungsi </p> </li> <li>Definisi &amp; Pemanggilan  </li> <li>Parameter &amp; Return Value  </li> <li>Fungsi Bawaan Python  </li> </ol>"},{"location":"Daftar%20Isi/#bagian-2-level-up-skill-level-intermediate","title":"\ud83e\udde0 Bagian 2: Level Up Skill (Level: Intermediate)","text":"<ol> <li>Struktur Data Python </li> <li>List, Tuple, Set, Dictionary  </li> <li> <p>Operasi dasar &amp; lanjutan  </p> </li> <li> <p>Pemrograman Modular </p> </li> <li>Import &amp; Modul  </li> <li>Membuat Modul Sendiri  </li> <li> <p><code>__name__ == \"__main__\"</code> itu apa sih?</p> </li> <li> <p>Pemrograman Berbasis Objek (OOP) </p> </li> <li>Kelas &amp; Objek  </li> <li>Atribut &amp; Method  </li> <li> <p>Inheritance, Polymorphism, Encapsulation</p> </li> <li> <p>Error Handling &amp; Debugging </p> </li> <li>Try-Except-Finally  </li> <li>Raise &amp; Custom Exception  </li> <li> <p>Debugging kayak detektif</p> </li> <li> <p>File Handling </p> </li> <li>Baca &amp; Tulis File (txt, csv)  </li> <li>Path &amp; Direktori  </li> <li>Context Manager (with)</li> </ol>"},{"location":"Daftar%20Isi/#bagian-3-menuju-dewa-python-level-advanced","title":"\ud83d\ude80 Bagian 3: Menuju Dewa Python (Level: Advanced)","text":"<ol> <li>Pythonic Thinking </li> <li>List Comprehension  </li> <li>Lambda, Map, Filter, Reduce  </li> <li> <p>Generator &amp; Iterator</p> </li> <li> <p>Database dengan Python </p> </li> <li>Koneksi ke MySQL dengan <code>mysql-connector</code> </li> <li>CRUD dengan Python  </li> <li> <p>Gunakan <code>sqlite3</code> buat local testing</p> </li> <li> <p>Web Development (Dasar Flask) </p> </li> <li>Instal Flask  </li> <li>Routing &amp; Template  </li> <li> <p>Koneksi ke Database &amp; Form Handling</p> </li> <li> <p>REST API dengan Flask </p> </li> <li>Buat API dari nol  </li> <li>JSON &amp; HTTP Method  </li> <li> <p>Konsumsi API di frontend (hint: Android kamu nungguin nih)</p> </li> <li> <p>Automasi &amp; Scripting </p> </li> <li>Otomatisasi file &amp; folder  </li> <li>Web scraping (pakai BeautifulSoup)  </li> <li> <p>Jadwal otomatis pakai <code>schedule</code></p> </li> <li> <p>Testing &amp; Deployment </p> </li> <li>Unit Testing dengan <code>unittest</code> atau <code>pytest</code> </li> <li>Virtual Environment  </li> <li>Deploy ke Heroku / Railway / PythonAnywhere</li> </ol>"},{"location":"Daftar%20Isi/#bagian-4-bonus-level-tips-trik-pro","title":"\ud83c\udf93 Bagian 4: Bonus Level - Tips &amp; Trik Pro","text":"<ol> <li>Best Practice &amp; Clean Code </li> <li>PEP8 &amp; Konvensi Penulisan  </li> <li>Dokumentasi yang cakep  </li> <li> <p>Refactoring kayak ninja</p> </li> <li> <p>Belajar dari Proyek Nyata </p> </li> <li>Mini proyek: To-Do List, Kalkulator, Web App  </li> <li>Struktur folder yang rapi  </li> <li>Kolaborasi pakai GitHub  </li> </ol>"},{"location":"Data%20Science%20%26%20Machine%20Learning/","title":"\ud83e\udd16 Data Science &amp; Machine Learning dengan Python","text":"<p>Python adalah raja dalam dunia Data Science &amp; Machine Learning berkat banyaknya library powerful seperti NumPy, Pandas, Matplotlib, Scikit-learn, dan TensorFlow. Di sini, kita bakal bahas dasar-dasarnya!  </p>"},{"location":"Data%20Science%20%26%20Machine%20Learning/#1-data-science-analisis-visualisasi-data","title":"\ud83d\udcca 1. Data Science: Analisis &amp; Visualisasi Data","text":""},{"location":"Data%20Science%20%26%20Machine%20Learning/#install-library-yang-dibutuhkan","title":"\ud83d\udd39 Install Library yang Dibutuhkan","text":"<pre><code>pip install numpy pandas matplotlib seaborn\n</code></pre>"},{"location":"Data%20Science%20%26%20Machine%20Learning/#11-manipulasi-data-dengan-pandas","title":"\ud83d\udd39 1.1 Manipulasi Data dengan Pandas","text":"<pre><code>import pandas as pd\n\n# Buat DataFrame\ndata = {\"Nama\": [\"Adit\", \"Budi\", \"Citra\"],\n        \"Umur\": [25, 30, 22],\n        \"Gaji\": [5000000, 7000000, 4500000]}\n\ndf = pd.DataFrame(data)\n\nprint(df)  # Tampilkan tabel\n</code></pre>"},{"location":"Data%20Science%20%26%20Machine%20Learning/#12-visualisasi-data-dengan-matplotlib-seaborn","title":"\ud83d\udd39 1.2 Visualisasi Data dengan Matplotlib &amp; Seaborn","text":"<pre><code>import matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.barplot(x=df[\"Nama\"], y=df[\"Gaji\"])\nplt.title(\"Gaji Karyawan\")\nplt.show()\n</code></pre> <p>\ud83d\udccc Ini akan menampilkan grafik gaji tiap karyawan! </p>"},{"location":"Data%20Science%20%26%20Machine%20Learning/#2-machine-learning-dengan-scikit-learn","title":"\ud83e\udd16 2. Machine Learning dengan Scikit-Learn","text":"<p>\ud83d\udccc Install Scikit-Learn </p> <pre><code>pip install scikit-learn\n</code></pre>"},{"location":"Data%20Science%20%26%20Machine%20Learning/#21-contoh-prediksi-sederhana-linear-regression","title":"\ud83d\udd39 2.1 Contoh Prediksi Sederhana (Linear Regression)","text":"<pre><code>import numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# Data (Jam Belajar vs Nilai)\nX = np.array([1, 2, 3, 4, 5]).reshape(-1, 1)\ny = np.array([50, 55, 60, 70, 75])\n\n# Buat Model &amp; Latih\nmodel = LinearRegression()\nmodel.fit(X, y)\n\n# Prediksi nilai jika belajar 6 jam\nprediksi = model.predict([[6]])\nprint(f\"Prediksi Nilai: {prediksi[0]:.2f}\")  # Output: Prediksi nilai sekitar 80\n</code></pre> <p>\ud83d\udccc Dengan Linear Regression, kita bisa memprediksi nilai berdasarkan jam belajar! </p>"},{"location":"Data%20Science%20%26%20Machine%20Learning/#kesimpulan","title":"\ud83c\udfaf Kesimpulan","text":"<p>\u2705 Pandas \u2192 Untuk manipulasi dan analisis data \u2705 Matplotlib &amp; Seaborn \u2192 Untuk visualisasi data \u2705 Scikit-Learn \u2192 Untuk model Machine Learning  </p> <p>Next: Artificial Intelligence &amp; Deep Learning! \ud83d\ude80</p>"},{"location":"Database%20%26%20ORM/","title":"\ud83d\uddc4\ufe0f Database &amp; ORM: Python &amp; Penyimpanan Data","text":"<p>Python bisa terhubung dengan berbagai database seperti MySQL, PostgreSQL, SQLite, dan lainnya. Kita bisa mengakses database pakai SQL langsung atau pakai ORM (Object-Relational Mapping) biar lebih fleksibel dan Pythonic.  </p>"},{"location":"Database%20%26%20ORM/#1-menggunakan-database-dengan-python-tanpa-orm","title":"\ud83d\udccc 1. Menggunakan Database dengan Python (Tanpa ORM)","text":"<p>Python punya modul bawaan <code>sqlite3</code> buat mengakses database SQLite tanpa install tambahan.  </p>"},{"location":"Database%20%26%20ORM/#contoh-sqlite-dengan-python","title":"\ud83d\udd39 Contoh: SQLite dengan Python","text":"<pre><code>import sqlite3\n\n# Buat &amp; koneksi ke database\nconn = sqlite3.connect(\"database.db\")\ncursor = conn.cursor()\n\n# Buat tabel\ncursor.execute(\"\"\"\nCREATE TABLE IF NOT EXISTS users (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    nama TEXT,\n    umur INTEGER\n)\n\"\"\")\n\n# Insert data\ncursor.execute(\"INSERT INTO users (nama, umur) VALUES (?, ?)\", (\"Adit\", 25))\nconn.commit()  # Simpan perubahan\n\n# Ambil data\ncursor.execute(\"SELECT * FROM users\")\nprint(cursor.fetchall())  # Output: [(1, 'Adit', 25)]\n\nconn.close()  # Tutup koneksi\n</code></pre> <p>\ud83d\udccc Kelebihan: \u2705 Langsung akses SQL tanpa library tambahan \ud83d\udccc Kekurangan: \u274c Harus tulis query SQL manual  </p>"},{"location":"Database%20%26%20ORM/#2-orm-object-relational-mapping-dengan-sqlalchemy","title":"\ud83d\ude80 2. ORM (Object-Relational Mapping) dengan SQLAlchemy","text":"<p>ORM bikin kita bisa interaksi dengan database pakai Python OOP tanpa nulis SQL langsung. Salah satu ORM terbaik adalah SQLAlchemy.  </p> <p>\ud83d\udccc Install SQLAlchemy dulu </p> <pre><code>pip install sqlalchemy\n</code></pre>"},{"location":"Database%20%26%20ORM/#contoh-sqlalchemy-orm-dengan-sqlite","title":"\ud83d\udd39 Contoh: SQLAlchemy ORM dengan SQLite","text":"<pre><code>from sqlalchemy import create_engine, Column, Integer, String\nfrom sqlalchemy.orm import declarative_base, sessionmaker\n\n# Koneksi ke database\nengine = create_engine(\"sqlite:///database.db\")\nBase = declarative_base()\n\n# Definisi Model (Tabel Users)\nclass User(Base):\n    __tablename__ = \"users\"\n    id = Column(Integer, primary_key=True)\n    nama = Column(String)\n    umur = Column(Integer)\n\n# Buat tabel di database\nBase.metadata.create_all(engine)\n\n# Insert Data ke Database\nSession = sessionmaker(bind=engine)\nsession = Session()\n\nuser_baru = User(nama=\"Budi\", umur=30)\nsession.add(user_baru)\nsession.commit()\n\n# Ambil Data\nusers = session.query(User).all()\nfor user in users:\n    print(user.id, user.nama, user.umur)\n\nsession.close()\n</code></pre> <p>\ud83d\udccc Keuntungan ORM: \u2705 Gak perlu nulis SQL manual \u2705 Struktur database lebih rapi pakai class Python \u2705 Lebih mudah pindah ke database lain (MySQL, PostgreSQL, dll.) </p>"},{"location":"Database%20%26%20ORM/#kesimpulan","title":"\ud83c\udfaf Kesimpulan","text":"<p>\u2705 SQL Biasa \u2192 Cocok kalau butuh kontrol penuh dengan query manual. \u2705 SQLAlchemy (ORM) \u2192 Cocok buat proyek besar &amp; clean code.  </p> <p>Next: API &amp; Web Development! \ud83d\ude80</p>"},{"location":"Deployment%20Model%20AI%20ke%20Web%20%26%20Mobile/","title":"\ud83d\ude80 Deployment Model AI ke Web &amp; Mobile","text":"<p>Setelah bikin model AI, langkah selanjutnya adalah deploy supaya bisa digunakan oleh aplikasi web atau mobile. Python bisa integrasi dengan Flask, FastAPI, TensorFlow Serving, dan Firebase buat menyebarkan model AI ke dunia nyata!  </p>"},{"location":"Deployment%20Model%20AI%20ke%20Web%20%26%20Mobile/#1-deploy-model-ai-ke-web-dengan-flask","title":"\ud83c\udf10 1. Deploy Model AI ke Web dengan Flask","text":"<p>\ud83d\udccc Contoh: Buat API AI dengan Flask untuk Prediksi Angka Tulisan Tangan (MNIST) </p> <pre><code>import tensorflow as tf\nfrom flask import Flask, request, jsonify\nimport numpy as np\n\napp = Flask(__name__)\n\n# Load model yang sudah dilatih\nmodel = tf.keras.models.load_model(\"model_mnist.h5\")\n\n@app.route(\"/predict\", methods=[\"POST\"])\ndef predict():\n    data = request.json[\"image\"]  # Terima data gambar dalam bentuk array\n    img = np.array(data).reshape(1, 28, 28) / 255.0  # Normalisasi\n    prediction = model.predict(img)\n    return jsonify({\"prediction\": int(np.argmax(prediction))})\n\nif __name__ == \"__main__\":\n    app.run(debug=True)\n</code></pre> <p>\ud83d\udccc Cara Pakai: 1. Jalankan Flask Server: <code>sh    python app.py</code> 2. Kirim data gambar via API (pakai Postman atau Python Requests) </p>"},{"location":"Deployment%20Model%20AI%20ke%20Web%20%26%20Mobile/#2-deploy-ke-mobile-android-dengan-firebase-ml-kit","title":"\ud83d\udcf1 2. Deploy ke Mobile (Android) dengan Firebase ML Kit","text":"<p>\ud83d\udccc Langkah-Langkah: 1. Convert Model AI ke TensorFlow Lite (TFLite)    ```python    import tensorflow as tf</p> <p>model = tf.keras.models.load_model(\"model_mnist.h5\")    converter = tf.lite.TFLiteConverter.from_keras_model(model)    tflite_model = converter.convert()</p> <p># Simpan model    with open(\"model.tflite\", \"wb\") as f:        f.write(tflite_model)    ``` 2. Upload Model ke Firebase ML Kit 3. Gunakan di Android Studio dengan TensorFlow Lite Interpreter </p> <p>\ud83d\udccc Keuntungannya: \u2705 Model bisa dijalankan langsung di HP (tanpa internet) \u2705 Lebih cepat &amp; hemat kuota </p>"},{"location":"Deployment%20Model%20AI%20ke%20Web%20%26%20Mobile/#kesimpulan","title":"\ud83c\udfaf Kesimpulan","text":"<p>\u2705 Flask API \u2192 Bagus buat deploy model AI ke server web \u2705 Firebase ML Kit \u2192 Bagus buat deploy AI ke mobile apps \u2705 TensorFlow Serving \u2192 Cocok buat skala besar (enterprise-level)  </p> <p>Next: Best Practices dalam Python Programming! \ud83d\ude80</p>"},{"location":"Design%20Patterns/","title":"Design Patterns","text":""},{"location":"Design%20Patterns/#design-patterns-di-python","title":"\ud83c\udfa8 Design Patterns di Python","text":""},{"location":"Design%20Patterns/#apa-itu-design-pattern","title":"\ud83e\udde0 Apa Itu Design Pattern?","text":"<p>Design Pattern = solusi generik untuk masalah umum dalam pemrograman.</p> <p>Bukan aturan saklek, tapi lebih kayak template pemikiran:</p> <p>\"Kalau nemu masalah X, bisa pakai pola Y\"</p>"},{"location":"Design%20Patterns/#tiga-kategori-utama","title":"\ud83d\udcda Tiga Kategori Utama","text":"Kategori Fokusnya Creational Cara membuat objek Structural Cara nyusun objek &amp; class Behavioral Cara objek berkomunikasi"},{"location":"Design%20Patterns/#1-singleton-pattern","title":"\ud83d\udee0\ufe0f 1. Singleton Pattern","text":"<p>\ud83e\uddc3 \"Satu class, satu objek. Titik.\"</p> <p>Gunanya: Pastikan hanya ada satu instance dari sebuah class. Contoh: Koneksi DB, konfigurasi global</p> <pre><code>class Singleton:\n    _instance = None\n\n    def __new__(cls):\n        if not cls._instance:\n            cls._instance = super().__new__(cls)\n        return cls._instance\n</code></pre>"},{"location":"Design%20Patterns/#2-factory-pattern","title":"\ud83c\udfed 2. Factory Pattern","text":"<p>\ud83c\udfed \"Client gak tau class mana yang dipakai. Cuma request, langsung jadi.\"</p> <p>Gunanya: Buat objek tanpa tahu class-nya secara eksplisit</p> <pre><code>class Animal:\n    def speak(self): pass\n\nclass Cat(Animal):\n    def speak(self): return \"Meow\"\n\nclass Dog(Animal):\n    def speak(self): return \"Woof\"\n\ndef animal_factory(type):\n    return Cat() if type == \"cat\" else Dog()\n</code></pre>"},{"location":"Design%20Patterns/#3-builder-pattern","title":"\ud83e\uddf1 3. Builder Pattern","text":"<p>\ud83e\udde9 \"Bangun objek step-by-step, bukan sekaligus.\"</p> <p>Gunanya: Untuk objek kompleks yang punya banyak bagian atau konfigurasi</p> <pre><code>class BurgerBuilder:\n    def __init__(self):\n        self.ingredients = []\n\n    def add_cheese(self):\n        self.ingredients.append(\"cheese\")\n        return self\n\n    def add_lettuce(self):\n        self.ingredients.append(\"lettuce\")\n        return self\n\n    def build(self):\n        return f\"Burger with {' &amp; '.join(self.ingredients)}\"\n\nburger = BurgerBuilder().add_cheese().add_lettuce().build()\n</code></pre>"},{"location":"Design%20Patterns/#4-adapter-pattern","title":"\ud83e\udea2 4. Adapter Pattern","text":"<p>\ud83d\udd0c \"Jembatan antara dua sistem yang gak kompatibel.\"</p> <p>Gunanya: Bikin dua class beda struktur bisa kerja bareng</p> <pre><code>class OldPrinter:\n    def print_text(self):\n        return \"Mencetak...\"\n\nclass NewPrinter:\n    def print(self):\n        return \"Printing...\"\n\nclass PrinterAdapter:\n    def __init__(self, printer):\n        self.printer = printer\n\n    def print(self):\n        return self.printer.print_text()\n\nprinter = PrinterAdapter(OldPrinter())\nprinter.print()\n</code></pre>"},{"location":"Design%20Patterns/#5-observer-pattern","title":"\ud83d\udc41\ufe0f 5. Observer Pattern","text":"<p>\ud83d\udd14 \"Kalau satu objek berubah, semua follower dikabarin.\"</p> <p>Gunanya: Cocok buat event-driven programming</p> <pre><code>class Publisher:\n    def __init__(self):\n        self.subscribers = []\n\n    def subscribe(self, sub):\n        self.subscribers.append(sub)\n\n    def notify(self, message):\n        for sub in self.subscribers:\n            sub.update(message)\n\nclass Subscriber:\n    def update(self, msg):\n        print(f\"Notif: {msg}\")\n\npub = Publisher()\nsub1 = Subscriber()\npub.subscribe(sub1)\npub.notify(\"Ada update baru!\")\n</code></pre>"},{"location":"Design%20Patterns/#6-strategy-pattern","title":"\ud83d\udea6 6. Strategy Pattern","text":"<p>\ud83c\udfad \"Ganti-ganti algoritma di runtime, tanpa ubah class utama.\"</p> <p>Gunanya: Misalnya sorting yang bisa diganti-ganti</p> <pre><code>class BubbleSort:\n    def sort(self, data): return \"Bubble Sorted\"\n\nclass QuickSort:\n    def sort(self, data): return \"Quick Sorted\"\n\nclass Context:\n    def __init__(self, strategy):\n        self.strategy = strategy\n\n    def sort_data(self, data):\n        return self.strategy.sort(data)\n\nctx = Context(QuickSort())\nctx.sort_data([5, 2, 1])\n</code></pre>"},{"location":"Design%20Patterns/#best-practices","title":"\ud83e\udde0 Best Practices","text":"<ul> <li>Pakai pattern kalau memang butuh </li> <li>Jangan terlalu memaksakan (anti \"Over-Engineering\")</li> <li>Pelajari pattern dari problem-nya, bukan dari teorinya doang</li> <li>Bisa dikombinasikan sesuai kebutuhan</li> </ul>"},{"location":"Design%20Patterns/#kesimpulan","title":"\ud83d\udccc Kesimpulan","text":"<p>Design Pattern bikin kodenya: - Lebih rapi - Lebih terstruktur - Lebih siap berkembang</p> <p>\"Pattern itu kayak jurus ninja \u2014 keliatan keren, tapi yang penting efektif!\" \ud83e\udd77\ud83d\udc0d</p>"},{"location":"Design%20Patterns/#tambahan-ke-mkdocsyml","title":"Tambahan ke <code>mkdocs.yml</code>:","text":"<pre><code>  - Design Patterns di Python: Design Patterns di Python.md\n</code></pre> <p>Lanjut yuk ke topik berikutnya? Mau bahas: - \u2699\ufe0f Performance Tuning &amp; Profiling - \ud83e\uddd1\u200d\ud83d\udcbb Automation &amp; Scripting - \ud83e\udd2f Python Async &amp; Concurrency Atau kamu mau request topik di luar list? Gue siapin juga! \ud83d\udcaa</p>"},{"location":"Environment%20Management/","title":"Environment Management","text":""},{"location":"Environment%20Management/#environment-managementmd","title":"\ud83d\udcc4 Environment Management.md","text":"<p>Berikut isi lengkapnya dalam format Markdown buat kamu taruh di <code>docs/</code>:</p>"},{"location":"Environment%20Management/#environment-management-di-python","title":"\ud83e\uddea Environment Management di Python","text":""},{"location":"Environment%20Management/#kenapa-perlu-environment","title":"\ud83e\udd14 Kenapa Perlu Environment?","text":"<p>Kamu gak mau project A pake Python 3.11, tapi project B malah error karena masih stuck di 3.7 kan? Environment management bikin tiap project punya dapur sendiri, jadi gak tabrakan versi atau dependency.</p>"},{"location":"Environment%20Management/#1-venv-built-in-virtual-environment","title":"1\ufe0f\u20e3 <code>venv</code> \u2013 Built-in Virtual Environment","text":"<p><code>venv</code> udah bawaan Python, simple dan cukup kuat.</p>"},{"location":"Environment%20Management/#cara-buat-virtual-env","title":"\ud83d\udce6 Cara Buat Virtual Env:","text":"<pre><code>python -m venv env\n</code></pre> <p>Ini bikin folder <code>env/</code> yang isinya Python environment terpisah.</p>"},{"location":"Environment%20Management/#aktifkan-env","title":"\u25b6\ufe0f Aktifkan Env:","text":"<ul> <li>Windows:   <code>bash   .\\env\\Scripts\\activate</code></li> <li>Linux/Mac:   <code>bash   source env/bin/activate</code></li> </ul> <p>Kalau aktif, prompt terminal kamu akan berubah (ada <code>(env)</code>).</p>"},{"location":"Environment%20Management/#nonaktifkan","title":"\u26d4 Nonaktifkan:","text":"<pre><code>deactivate\n</code></pre>"},{"location":"Environment%20Management/#2-pip-freeze-requirementstxt","title":"2\ufe0f\u20e3 <code>pip freeze</code> &amp; <code>requirements.txt</code>","text":"<p>Setelah install banyak paket:</p> <pre><code>pip freeze &gt; requirements.txt\n</code></pre> <p>Lalu bisa di-install ulang di tempat lain:</p> <pre><code>pip install -r requirements.txt\n</code></pre>"},{"location":"Environment%20Management/#3-pipenv-lebih-rapih-otomatis","title":"3\ufe0f\u20e3 <code>pipenv</code> \u2013 Lebih Rapih &amp; Otomatis","text":"<pre><code>pip install pipenv\n</code></pre>"},{"location":"Environment%20Management/#mulai-project","title":"\ud83d\ude80 Mulai Project:","text":"<pre><code>pipenv install requests\n</code></pre> <p>Pipenv bakal otomatis bikin <code>Pipfile</code> dan <code>Pipfile.lock</code> (semacam <code>package.json</code>-nya Python)</p>"},{"location":"Environment%20Management/#aktifkan-shell-pipenv","title":"\ud83e\uddd9 Aktifkan Shell Pipenv:","text":"<pre><code>pipenv shell\n</code></pre>"},{"location":"Environment%20Management/#4-poetry-solusi-modern-kece-abis","title":"4\ufe0f\u20e3 <code>poetry</code> \u2013 Solusi Modern &amp; Kece Abis","text":"<pre><code>pip install poetry\n</code></pre>"},{"location":"Environment%20Management/#buat-project","title":"\ud83d\udd28 Buat Project:","text":"<pre><code>poetry new nama_project\n</code></pre>"},{"location":"Environment%20Management/#tambah-dependency","title":"\ud83d\udce6 Tambah Dependency:","text":"<pre><code>poetry add numpy\n</code></pre>"},{"location":"Environment%20Management/#install-semua","title":"\ud83d\udd01 Install Semua:","text":"<pre><code>poetry install\n</code></pre> <p>Poetry juga punya virtual env sendiri. Profesional banget vibes-nya.</p>"},{"location":"Environment%20Management/#vs-code-virtual-env","title":"\ud83d\udce6 VS Code + Virtual Env","text":"<ul> <li>Buka Command Palette &gt; Python: Select Interpreter</li> <li>Pilih interpreter dari folder <code>env</code> atau yang dibuat Pipenv/Poetry</li> </ul>"},{"location":"Environment%20Management/#best-practice","title":"\u2705 Best Practice","text":"<ul> <li>Satu project, satu environment</li> <li>Simpan <code>requirements.txt</code> atau <code>Pipfile</code></li> <li>Jangan commit folder <code>env/</code></li> <li>Gunakan tools seperti <code>pre-commit</code>, <code>black</code>, <code>flake8</code> di dalam env</li> </ul>"},{"location":"Environment%20Management/#tips-tambahan","title":"\ud83d\udca1 Tips Tambahan","text":"Tools Cocok Untuk <code>venv</code> Proyek ringan, built-in <code>pipenv</code> Dev yang suka simpel + locking <code>poetry</code> Proyek serius, publish ke PyPI"},{"location":"Environment%20Management/#kesimpulan","title":"\ud83d\udccc Kesimpulan","text":"<p>Environment management bukan hal ribet, tapi nyelamatin hidup waktu dependency project mulai aneh-aneh. Bikin environment, commit <code>requirements.txt</code>, hidup tenang \ud83d\ude0c\ud83d\udc0d</p> <p>Kalau kamu setuju, kita lanjut ke topik berikutnya. Tapi sebelumnya mau aku buatin juga <code>nav:</code>-nya?</p> <p>Contoh penambahan di <code>mkdocs.yml</code>:</p> <pre><code>  - Environment Management: Environment Management.md\n</code></pre> <p>Gas? Mau lanjut langsung ke topik berikutnya juga?</p>"},{"location":"Error%20Handling%20%26%20Debugging/","title":"\ud83d\udea8 Error Handling &amp; Debugging di Python","text":"<p>Error pasti terjadi dalam coding, tapi jangan panik! Python punya mekanisme error handling biar program gak langsung crash. Kita juga bakal belajar debugging buat jadi detektif kode yang handal. \ud83d\udd0d\ud83d\udd75\ufe0f\u200d\u2642\ufe0f  </p>"},{"location":"Error%20Handling%20%26%20Debugging/#1-try-except-finally-menangani-error-dengan-elegan","title":"\u26a0\ufe0f 1. Try-Except-Finally (Menangani Error dengan Elegan)","text":"<p><code>try-except</code> digunakan untuk menangkap error tanpa bikin program berhenti.  </p>"},{"location":"Error%20Handling%20%26%20Debugging/#contoh-sederhana","title":"\ud83d\udd39 Contoh Sederhana","text":"<pre><code>try:\n    angka = int(input(\"Masukkan angka: \"))\n    hasil = 10 / angka\n    print(f\"Hasil: {hasil}\")\n\nexcept ZeroDivisionError:\n    print(\"Error! Tidak bisa membagi dengan nol.\")\n\nexcept ValueError:\n    print(\"Error! Masukkan angka yang benar.\")\n\nexcept Exception as e:\n    print(f\"Terjadi error: {e}\")\n\nfinally:\n    print(\"Program selesai.\")\n</code></pre> <p>\ud83d\udccc <code>finally</code> akan selalu dijalankan, entah ada error atau tidak. \ud83d\udccc <code>Exception as e</code> menangkap semua jenis error.  </p> <p>Contoh Output: </p> <pre><code>Masukkan angka: 0\nError! Tidak bisa membagi dengan nol.\nProgram selesai.\n</code></pre>"},{"location":"Error%20Handling%20%26%20Debugging/#2-raise-custom-exception","title":"\ud83d\ude80 2. Raise &amp; Custom Exception","text":"<p>Kita juga bisa membuat error sendiri dengan <code>raise</code>.  </p>"},{"location":"Error%20Handling%20%26%20Debugging/#raise-exception-manual","title":"\ud83d\udd39 Raise Exception Manual","text":"<pre><code>def cek_umur(umur):\n    if umur &lt; 18:\n        raise ValueError(\"Umur harus minimal 18 tahun!\")\n    return \"Akses diberikan.\"\n\ntry:\n    print(cek_umur(16))\nexcept ValueError as e:\n    print(f\"Error: {e}\")\n</code></pre> <p>\ud83d\udccc Hasilnya: </p> <pre><code>Error: Umur harus minimal 18 tahun!\n</code></pre>"},{"location":"Error%20Handling%20%26%20Debugging/#membuat-exception-sendiri","title":"\ud83d\udd39 Membuat Exception Sendiri","text":"<pre><code>class CustomError(Exception):\n    pass  # Bisa ditambah fitur sendiri\n\ntry:\n    raise CustomError(\"Ini error khusus!\")\nexcept CustomError as e:\n    print(f\"Custom Error: {e}\")\n</code></pre>"},{"location":"Error%20Handling%20%26%20Debugging/#3-debugging-kayak-detektif","title":"\ud83d\udd75\ufe0f\u200d\u2642\ufe0f 3. Debugging Kayak Detektif","text":"<p>Debugging adalah proses mencari &amp; memperbaiki bug dalam kode. Python punya beberapa tools keren buat ini!  </p>"},{"location":"Error%20Handling%20%26%20Debugging/#1-gunakan-print-statement","title":"\ud83d\udd39 1. Gunakan Print Statement \ud83d\udce2","text":"<p>Kadang, print() bisa bantu cari bug.  </p> <pre><code>def bagi(a, b):\n    print(f\"DEBUG: a={a}, b={b}\")  # Debugging pakai print\n    return a / b\n\nprint(bagi(10, 2))\n</code></pre>"},{"location":"Error%20Handling%20%26%20Debugging/#2-gunakan-assert-buat-validasi","title":"\ud83d\udd39 2. Gunakan <code>assert</code> Buat Validasi","text":"<pre><code>def cek_nilai(n):\n    assert n &gt; 0, \"Nilai harus lebih besar dari 0!\"\n    return f\"Nilai valid: {n}\"\n\nprint(cek_nilai(5))  # Berhasil\nprint(cek_nilai(-3))  # AssertionError\n</code></pre>"},{"location":"Error%20Handling%20%26%20Debugging/#3-debugging-pakai-pdb-python-debugger","title":"\ud83d\udd39 3. Debugging Pakai <code>pdb</code> (Python Debugger) \ud83d\udd75\ufe0f\u200d\u2642\ufe0f","text":"<p>Ketik <code>import pdb; pdb.set_trace()</code> di mana saja buat masuk mode debugging interaktif.  </p> <pre><code>import pdb\n\ndef hitung(a, b):\n    pdb.set_trace()  # Debugging mulai di sini\n    return a + b\n\nhitung(10, 5)\n</code></pre> <p>\ud83d\udccc Command Debugging di pdb: - <code>n</code> (next) \u2192 Jalankan kode baris demi baris - <code>c</code> (continue) \u2192 Lanjutkan eksekusi normal - <code>p variabel</code> \u2192 Cetak nilai variabel  </p>"},{"location":"Error%20Handling%20%26%20Debugging/#kesimpulan","title":"\ud83c\udfaf Kesimpulan","text":"<p>\u2705 Try-Except-Finally \u2192 Tangkap error tanpa bikin program crash. \u2705 Raise &amp; Custom Exception \u2192 Bisa bikin error sendiri sesuai kebutuhan. \u2705 Debugging \u2192 Bisa pakai print, assert, atau Python Debugger (<code>pdb</code>).  </p> <p>Next: Manipulasi File (Baca &amp; Tulis File)! \ud83d\ude80</p>"},{"location":"File%20Handling/","title":"\ud83d\udcc2 File Handling di Python","text":"<p>Python punya fitur powerful buat membaca, menulis, dan mengelola file. Ini penting banget buat menyimpan data atau membaca informasi dari file eksternal.  </p>"},{"location":"File%20Handling/#1-baca-tulis-file-txt-csv","title":"\ud83d\udcdd 1. Baca &amp; Tulis File (TXT, CSV)","text":""},{"location":"File%20Handling/#membaca-file-txt","title":"\ud83d\udd39 Membaca File TXT","text":"<pre><code>file = open(\"data.txt\", \"r\")  # \"r\" = read mode\nisi = file.read()\nprint(isi)\nfile.close()  # Jangan lupa tutup file!\n</code></pre> <p>\ud83d\udccc Mode dalam <code>open()</code> - <code>\"r\"</code> \u2192 Read (baca) - <code>\"w\"</code> \u2192 Write (tulis, overwrite) - <code>\"a\"</code> \u2192 Append (tambah data tanpa hapus) - <code>\"x\"</code> \u2192 Create (buat file baru, error kalau sudah ada)  </p>"},{"location":"File%20Handling/#menulis-ke-file-txt","title":"\ud83d\udd39 Menulis ke File TXT","text":"<pre><code>file = open(\"data.txt\", \"w\")  # \"w\" akan overwrite isi file\nfile.write(\"Halo, ini data baru!\\n\")\nfile.close()\n</code></pre> <p>Kalau mau nambah data tanpa hapus isi lama, pakai <code>\"a\"</code> (append).  </p> <pre><code>file = open(\"data.txt\", \"a\")\nfile.write(\"Tambahan data.\\n\")\nfile.close()\n</code></pre>"},{"location":"File%20Handling/#membaca-file-csv","title":"\ud83d\udcca Membaca File CSV","text":"<p>CSV (Comma-Separated Values) sering dipakai buat data tabular (seperti Excel).  </p> <pre><code>import csv\n\nwith open(\"data.csv\", \"r\") as file:\n    reader = csv.reader(file)\n    for row in reader:\n        print(row)\n</code></pre> <p>\ud83d\udccc Hasilnya bisa berupa list: </p> <pre><code>['Nama', 'Umur', 'Kota']\n['Adit', '21', 'Jakarta']\n['Budi', '25', 'Surabaya']\n</code></pre>"},{"location":"File%20Handling/#menulis-ke-file-csv","title":"\ud83d\udd39 Menulis ke File CSV","text":"<pre><code>import csv\n\nwith open(\"data.csv\", \"w\", newline=\"\") as file:\n    writer = csv.writer(file)\n    writer.writerow([\"Nama\", \"Umur\", \"Kota\"])\n    writer.writerow([\"Adit\", 21, \"Jakarta\"])\n    writer.writerow([\"Budi\", 25, \"Surabaya\"])\n</code></pre>"},{"location":"File%20Handling/#2-path-direktori","title":"\ud83d\udcc1 2. Path &amp; Direktori","text":"<p>Python bisa juga mengelola file &amp; folder pakai modul <code>os</code> dan <code>pathlib</code>.  </p>"},{"location":"File%20Handling/#cek-apakah-file-ada","title":"\ud83d\udd39 Cek Apakah File Ada","text":"<pre><code>import os\n\nif os.path.exists(\"data.txt\"):\n    print(\"File ditemukan!\")\nelse:\n    print(\"File tidak ada!\")\n</code></pre>"},{"location":"File%20Handling/#cek-isi-folder","title":"\ud83d\udd39 Cek Isi Folder","text":"<pre><code>import os\n\nprint(os.listdir(\".\"))  # \".\" berarti folder saat ini\n</code></pre>"},{"location":"File%20Handling/#membuat-menghapus-folder","title":"\ud83d\udd39 Membuat &amp; Menghapus Folder","text":"<pre><code>os.mkdir(\"folder_baru\")  # Buat folder\nos.rmdir(\"folder_baru\")  # Hapus folder kosong\n</code></pre>"},{"location":"File%20Handling/#3-context-manager-with","title":"\ud83d\udd04 3. Context Manager (<code>with</code>)","text":"<p><code>with</code> memastikan file tertutup otomatis setelah digunakan.  </p>"},{"location":"File%20Handling/#membaca-file-dengan-with","title":"\ud83d\udd39 Membaca File dengan <code>with</code>","text":"<pre><code>with open(\"data.txt\", \"r\") as file:\n    isi = file.read()\n    print(isi)  # File otomatis tertutup setelah keluar blok `with`\n</code></pre>"},{"location":"File%20Handling/#menulis-file-dengan-with","title":"\ud83d\udd39 Menulis File dengan <code>with</code>","text":"<pre><code>with open(\"data.txt\", \"w\") as file:\n    file.write(\"Data baru dengan with statement!\\n\")\n</code></pre>"},{"location":"File%20Handling/#kesimpulan","title":"\ud83c\udfaf Kesimpulan","text":"<p>\u2705 Baca &amp; Tulis File \u2192 Bisa TXT atau CSV. \u2705 Path &amp; Direktori \u2192 Bisa cek file, buat/hapus folder. \u2705 Context Manager (<code>with</code>) \u2192 Biar gak lupa tutup file otomatis.  </p> <p>Next: Library &amp; Virtual Environment! \ud83d\ude80</p>"},{"location":"Fungsi/","title":"\ud83d\udd25 Fungsi di Python","text":"<p>Fungsi adalah blok kode yang bisa dipanggil kapan saja, sehingga kode kita lebih rapi, efisien, dan bisa digunakan ulang.  </p>"},{"location":"Fungsi/#1-definisi-pemanggilan-fungsi","title":"\ud83c\udfaf 1. Definisi &amp; Pemanggilan Fungsi","text":"<p>Kita bisa mendefinisikan fungsi sendiri menggunakan <code>def</code>.  </p>"},{"location":"Fungsi/#sintaks-dasar","title":"\ud83d\udd39 Sintaks Dasar","text":"<pre><code>def nama_fungsi():\n    # kode di dalam fungsi\n    print(\"Halo dari dalam fungsi!\")\n\n# Pemanggilan fungsi\nnama_fungsi()\n</code></pre> <p>\ud83d\udccc Tanpa pemanggilan, fungsi nggak akan jalan!  </p>"},{"location":"Fungsi/#contoh-fungsi-sederhana","title":"\ud83d\udd25 Contoh: Fungsi Sederhana","text":"<pre><code>def sapa():\n    print(\"Halo! Selamat datang di Python \ud83d\ude80\")\n\nsapa()\n</code></pre> <p>\ud83d\udcdd Output: </p> <pre><code>Halo! Selamat datang di Python \ud83d\ude80\n</code></pre>"},{"location":"Fungsi/#2-parameter-return-value","title":"\ud83d\udd04 2. Parameter &amp; Return Value","text":"<p>Fungsi bisa menerima parameter (input) dan mengembalikan nilai (return value).  </p>"},{"location":"Fungsi/#a-parameter-input-ke-fungsi","title":"\ud83d\udd39 A. Parameter (Input ke Fungsi)","text":"<pre><code>def sapa_nama(nama):\n    print(f\"Halo, {nama}! Selamat belajar Python.\")\n\nsapa_nama(\"Adit\")\nsapa_nama(\"Budi\")\n</code></pre> <p>\ud83d\udcdd Output: </p> <pre><code>Halo, Adit! Selamat belajar Python.  \nHalo, Budi! Selamat belajar Python.  \n</code></pre> <p>\ud83d\udccc Parameter bisa lebih dari satu!  </p> <pre><code>def tambah(a, b):\n    print(f\"Hasil: {a + b}\")\n\ntambah(5, 3)  # Output: Hasil: 8\n</code></pre>"},{"location":"Fungsi/#b-return-value-mengembalikan-hasil","title":"\ud83d\udd39 B. Return Value (Mengembalikan Hasil)","text":"<p>Gunakan <code>return</code> kalau mau mengembalikan nilai dari fungsi.  </p> <pre><code>def luas_persegi(sisi):\n    return sisi * sisi\n\nhasil = luas_persegi(4)\nprint(f\"Luas persegi: {hasil}\")  # Output: Luas persegi: 16\n</code></pre> <p>\ud83d\udccc Keuntungan <code>return</code> \u2192 Bisa menyimpan hasil fungsi ke variabel lain.</p>"},{"location":"Fungsi/#c-default-parameter-nilai-bawaan","title":"\ud83d\udd39 C. Default Parameter (Nilai Bawaan)","text":"<pre><code>def salam(nama=\"User\"):\n    print(f\"Halo, {nama}!\")\n\nsalam()         # Output: Halo, User!\nsalam(\"Rina\")   # Output: Halo, Rina!\n</code></pre> <p>\ud83d\udccc Jika parameter tidak diberikan, Python pakai nilai default.  </p>"},{"location":"Fungsi/#3-fungsi-bawaan-python-built-in-functions","title":"\u26a1 3. Fungsi Bawaan Python (Built-in Functions)","text":"<p>Python punya banyak fungsi bawaan yang langsung bisa dipakai!  </p> Fungsi Deskripsi Contoh <code>print()</code> Menampilkan teks <code>print(\"Hello!\")</code> <code>input()</code> Menerima input user <code>nama = input(\"Masukkan nama: \")</code> <code>len()</code> Menghitung panjang data <code>len(\"Python\")  # 6</code> <code>type()</code> Mengecek tipe data <code>type(123)  # &lt;class 'int'&gt;</code> <code>int()</code> Konversi ke integer <code>int(\"10\")  # 10</code> <code>float()</code> Konversi ke float <code>float(\"3.14\")  # 3.14</code> <code>str()</code> Konversi ke string <code>str(123)  # \"123\"</code> <code>abs()</code> Nilai mutlak <code>abs(-5)  # 5</code> <code>round()</code> Pembulatan angka <code>round(3.6)  # 4</code> <code>max()</code> Nilai terbesar <code>max([1, 2, 3])  # 3</code> <code>min()</code> Nilai terkecil <code>min([1, 2, 3])  # 1</code> <code>sum()</code> Menjumlahkan elemen <code>sum([1, 2, 3])  # 6</code> <p>\ud83d\udccc Contoh Penggunaan </p> <pre><code>angka = [4, 8, 2, 9, 5]\n\nprint(max(angka))  # 9\nprint(min(angka))  # 2\nprint(sum(angka))  # 28\nprint(len(angka))  # 5\n</code></pre>"},{"location":"Fungsi/#kesimpulan","title":"\ud83d\ude80 Kesimpulan","text":"<p>\u2705 Fungsi membantu membuat kode lebih rapi &amp; reusable. \u2705 Parameter \u2192 Bisa menerima input. \u2705 Return \u2192 Bisa mengembalikan nilai ke variabel lain. \u2705 Python punya banyak fungsi bawaan buat mempermudah coding!  </p> <p>Next: Struktur Data Python (List, Tuple, Dictionary, Set)! \ud83d\udd25</p>"},{"location":"Instalasi/","title":"Instalasi","text":""},{"location":"Instalasi/#instalasi-setup-python","title":"\ud83d\udd27 Instalasi &amp; Setup Python","text":"<p>Sebelum kita mulai ngoding, kita harus install Python dulu dan pilih alat terbaik buat nulis kode. Let's gooo! \ud83d\ude80  </p>"},{"location":"Instalasi/#1-install-python-windowslinuxmac","title":"\ud83d\udda5\ufe0f 1. Install Python (Windows/Linux/Mac)","text":""},{"location":"Instalasi/#windows","title":"\ud83d\udd39 Windows","text":"<ol> <li>Download Python dari situs resmi: https://www.python.org/downloads/ </li> <li>Jalankan installer, lalu CEKLIS \"Add Python to PATH\" (biar bisa dipakai di cmd).  </li> <li>Klik Install Now dan tunggu prosesnya selesai.  </li> <li>Cek instalasi dengan membuka Command Prompt (cmd), lalu ketik: <code>sh    python --version</code>    Kalau muncul versi Python (misal <code>Python 3.12.2</code>), berarti sukses terinstall! \ud83c\udf89  </li> </ol>"},{"location":"Instalasi/#linux-ubuntudebian","title":"\ud83d\udd39 Linux (Ubuntu/Debian)","text":"<p>Python biasanya sudah terinstall, tapi kalau belum, install dengan:  </p> <pre><code>sudo apt update &amp;&amp; sudo apt install python3\n</code></pre> <p>Cek versi Python dengan:  </p> <pre><code>python3 --version\n</code></pre>"},{"location":"Instalasi/#mac-macos","title":"\ud83d\udd39 Mac (macOS)","text":"<ol> <li>Gunakan Homebrew buat install Python: <code>sh    brew install python</code></li> <li>Cek instalasi dengan: <code>sh    python3 --version</code></li> </ol>"},{"location":"Instalasi/#2-ide-vs-text-editor-pilih-yang-mana","title":"\u270d\ufe0f 2. IDE vs Text Editor: Pilih yang Mana?","text":"<p>IDE (Integrated Development Environment) \u2192 Full fitur buat coding, debugging, dan testing. Text Editor \u2192 Ringan, cepat, dan fleksibel.  </p> Nama Tipe Kelebihan Cocok untuk IDLE IDE Simple, bawaan Python Pemula VSCode Text Editor Ringan, banyak plugin Semua level PyCharm IDE Powerful, auto-suggest, debugging pro Advanced Jupyter Notebook IDE Interaktif, cocok buat Data Science Data Scientist <p>\ud83d\udccc Rekomendasi: - Pemula? Pakai IDLE atau VSCode. - Mau full fitur? Pakai PyCharm. - Buat data science? Pakai Jupyter Notebook.  </p>"},{"location":"Instalasi/#3-hello-world-pertamamu","title":"\ud83c\udf89 3. Hello World Pertamamu!","text":"<p>Waktunya nulis kode pertama! \ud83d\ude80  </p> <p>\ud83d\udd39 Cara 1: Pakai IDLE / VSCode 1. Buka IDLE atau VSCode. 2. Tulis kode ini: <code>python    print(\"Hello, World!\")</code> 3. Jalankan kode, dan kalau muncul: <code>Hello, World!</code>    Berarti Python-mu udah siap! \ud83c\udf8a  </p> <p>\ud83d\udd39 Cara 2: Pakai Terminal / Command Prompt 1. Buka cmd (Windows) atau Terminal (Linux/Mac). 2. Ketik: <code>sh    python</code> 3. Lalu ketik: <code>python    print(\"Hello, World!\")</code> 4. Tekan Enter dan lihat hasilnya! \ud83c\udf89  </p> <p>\u2705 Kesimpulan: - Install Python sesuai sistem operasi. - Pilih IDE/Text Editor yang cocok. - Jalankan Hello World buat memastikan instalasi sukses.  </p> <p>Udah siap lanjut ke sintaks dasar Python? \ud83d\udd25 Let\u2019s go! \ud83d\ude80</p>"},{"location":"Kontrol%20Alur%20Program/","title":"\ud83d\udd04 Kontrol Alur Program di Python","text":"<p>Sekarang kita masuk ke logika pemrograman! Dengan kontrol alur, kita bisa bikin program yang bisa mengambil keputusan dan mengulang tugas secara otomatis. Let's gooo! \ud83d\ude80  </p>"},{"location":"Kontrol%20Alur%20Program/#1-if-else-logika-kehidupan","title":"\u26a1 1. If-Else: Logika Kehidupan \ud83d\ude0e","text":"<p>If-Else memungkinkan program buat mengambil keputusan berdasarkan kondisi tertentu.  </p>"},{"location":"Kontrol%20Alur%20Program/#sintaks-dasar","title":"\ud83d\udd39 Sintaks Dasar","text":"<pre><code>if kondisi:\n    # kode jika kondisi True\nelif kondisi_lain:\n    # kode jika kondisi lain True\nelse:\n    # kode jika semua kondisi False\n</code></pre>"},{"location":"Kontrol%20Alur%20Program/#contoh-1-cek-bilangan-positif-atau-negatif","title":"\ud83d\udd25 Contoh 1: Cek Bilangan Positif atau Negatif","text":"<pre><code>angka = int(input(\"Masukkan angka: \"))\n\nif angka &gt; 0:\n    print(\"Angka ini positif!\")\nelif angka &lt; 0:\n    print(\"Angka ini negatif!\")\nelse:\n    print(\"Angka ini nol!\")\n</code></pre>"},{"location":"Kontrol%20Alur%20Program/#contoh-2-cek-login-user","title":"\ud83d\udd25 Contoh 2: Cek Login User","text":"<pre><code>password = input(\"Masukkan password: \")\n\nif password == \"python123\":\n    print(\"Login berhasil! \ud83c\udf89\")\nelse:\n    print(\"Password salah, coba lagi! \u274c\")\n</code></pre> <p>\ud83d\udccc Tips: - <code>elif</code> bisa lebih dari satu. - <code>else</code> opsional, tapi berguna buat menangani semua kemungkinan lain.  </p>"},{"location":"Kontrol%20Alur%20Program/#2-looping-for-while","title":"\ud83d\udd01 2. Looping (For &amp; While)","text":"<p>Looping digunakan buat mengulang eksekusi kode tanpa harus ngetik berkali-kali.  </p>"},{"location":"Kontrol%20Alur%20Program/#a-looping-dengan-for","title":"\ud83d\udd39 A. Looping dengan <code>for</code>","text":"<p>Gunakan <code>for</code> buat mengulang suatu kode dalam jumlah tertentu.  </p>"},{"location":"Kontrol%20Alur%20Program/#1-looping-menggunakan-range","title":"1. Looping Menggunakan <code>range()</code>","text":"<pre><code>for i in range(5):  # 0 sampai 4\n    print(f\"Loop ke-{i}\")\n</code></pre> <p>\ud83d\udccc <code>range(n)</code> menghasilkan angka dari <code>0</code> sampai <code>n-1</code>.  </p>"},{"location":"Kontrol%20Alur%20Program/#2-looping-list-atau-string","title":"2. Looping List atau String","text":"<pre><code>hobi = [\"ngoding\", \"gaming\", \"makan\"]\n\nfor h in hobi:\n    print(\"Saya suka\", h)\n</code></pre> <pre><code>for huruf in \"Python\":\n    print(huruf, end=\" \")  # Output: P y t h o n\n</code></pre>"},{"location":"Kontrol%20Alur%20Program/#b-looping-dengan-while","title":"\ud83d\udd39 B. Looping dengan <code>while</code>","text":"<p>Gunakan <code>while</code> kalau kita nggak tahu pasti berapa kali loop akan berjalan.  </p>"},{"location":"Kontrol%20Alur%20Program/#1-looping-sampai-kondisi-terpenuhi","title":"1. Looping sampai kondisi terpenuhi","text":"<pre><code>angka = 1\n\nwhile angka &lt;= 5:\n    print(f\"Angka sekarang: {angka}\")\n    angka += 1  # Jangan lupa update biar nggak loop selamanya!\n</code></pre>"},{"location":"Kontrol%20Alur%20Program/#2-program-sederhana-tebak-angka","title":"2. Program Sederhana: Tebak Angka","text":"<pre><code>import random\n\nangka_rahasia = random.randint(1, 10)\ntebakan = 0\n\nwhile tebakan != angka_rahasia:\n    tebakan = int(input(\"Tebak angka (1-10): \"))\n\n    if tebakan &lt; angka_rahasia:\n        print(\"Terlalu kecil! \u2b06\ufe0f\")\n    elif tebakan &gt; angka_rahasia:\n        print(\"Terlalu besar! \u2b07\ufe0f\")\n    else:\n        print(\"Benar! \ud83c\udf89\")\n</code></pre> <p>\ud83d\udccc Tips: - <code>while</code> cocok buat program yang harus berjalan terus sampai kondisi tertentu terpenuhi. - Jangan lupa update kondisi dalam loop biar gak stuck di infinite loop.  </p>"},{"location":"Kontrol%20Alur%20Program/#3-break-continue-dan-pass","title":"\ud83d\udd04 3. Break, Continue, dan Pass","text":"<p>Terkadang kita butuh menghentikan atau melewati sebagian kode dalam loop.  </p>"},{"location":"Kontrol%20Alur%20Program/#a-break-hentikan-loop-langsung","title":"\ud83d\udd39 A. <code>break</code> \u2192 Hentikan loop langsung","text":"<pre><code>for angka in range(1, 10):\n    if angka == 5:\n        print(\"Angka 5 ketemu, loop berhenti!\")\n        break\n    print(\"Angka:\", angka)\n</code></pre> <p>\ud83d\udccc Kalau <code>break</code> ketemu, loop langsung berhenti!  </p>"},{"location":"Kontrol%20Alur%20Program/#b-continue-lewati-iterasi-lanjut-ke-berikutnya","title":"\ud83d\udd39 B. <code>continue</code> \u2192 Lewati iterasi &amp; lanjut ke berikutnya","text":"<pre><code>for angka in range(1, 6):\n    if angka == 3:\n        print(\"Lewati angka 3\")\n        continue\n    print(\"Angka:\", angka)\n</code></pre> <p>\ud83d\udccc Kalau <code>continue</code> ketemu, kode setelahnya dalam loop dilewati, tapi loop tetap lanjut.  </p>"},{"location":"Kontrol%20Alur%20Program/#c-pass-placeholder-nggak-ngapa-ngapain","title":"\ud83d\udd39 C. <code>pass</code> \u2192 Placeholder (nggak ngapa-ngapain)","text":"<p>Kadang kita butuh struktur kode, tapi belum mau diisi logikanya. Gunakan <code>pass</code>!  </p> <pre><code>for angka in range(1, 6):\n    if angka == 3:\n        pass  # Nanti bisa diisi logika lain\n    print(\"Angka:\", angka)\n</code></pre> <p>\ud83d\udccc <code>pass</code> berguna kalau kita mau tunda penulisan kode tanpa kena error.  </p>"},{"location":"Kontrol%20Alur%20Program/#kesimpulan","title":"\ud83d\ude80 Kesimpulan","text":"<p>\u2705 If-Else \u2192 Mengambil keputusan berdasarkan kondisi. \u2705 For Loop \u2192 Mengulang berdasarkan jumlah tertentu atau koleksi data. \u2705 While Loop \u2192 Mengulang sampai kondisi tertentu terpenuhi. \u2705 Break, Continue, Pass \u2192 Mengontrol jalannya loop.  </p> <p>Next: Fungsi di Python! \ud83d\udd25</p>"},{"location":"List%20Comprehension/","title":"\ud83e\udde0 Pythonic Thinking: Menulis Kode Python Seperti Pro","text":"<p>Pythonic Thinking adalah cara menulis kode yang bersih, efisien, dan sesuai standar Python. Di sini, kita bahas list comprehension, lambda, map/filter/reduce, serta generator &amp; iterator.  </p>"},{"location":"List%20Comprehension/#1-list-comprehension-cara-elegan-buat-list","title":"\ud83d\ude80 1. List Comprehension: Cara Elegan Buat List","text":"<p>List comprehension adalah cara singkat &amp; cepat buat bikin list baru dari list lama.  </p>"},{"location":"List%20Comprehension/#tanpa-list-comprehension-cara-biasa","title":"\ud83d\udd39 Tanpa List Comprehension (Cara Biasa)","text":"<pre><code>angka = [1, 2, 3, 4, 5]\nkuadrat = []\nfor i in angka:\n    kuadrat.append(i ** 2)\n\nprint(kuadrat)  # Output: [1, 4, 9, 16, 25]\n</code></pre>"},{"location":"List%20Comprehension/#dengan-list-comprehension-pythonic","title":"\ud83d\udd39 Dengan List Comprehension (Pythonic \ud83d\ude80)","text":"<pre><code>kuadrat = [i ** 2 for i in angka]\nprint(kuadrat)  # Output: [1, 4, 9, 16, 25]\n</code></pre> <p>\ud83d\udccc Bisa ditambah kondisi (if statement)! </p> <pre><code>genap = [i for i in angka if i % 2 == 0]\nprint(genap)  # Output: [2, 4]\n</code></pre>"},{"location":"List%20Comprehension/#2-lambda-map-filter-reduce-pemrograman-fungsional-di-python","title":"\u26a1 2. Lambda, Map, Filter, Reduce: Pemrograman Fungsional di Python","text":""},{"location":"List%20Comprehension/#lambda-fungsi-anonim","title":"\ud83d\udd39 Lambda (Fungsi Anonim)","text":"<p>Fungsi kecil &amp; cepat yang bisa ditulis dalam satu baris.  </p> <pre><code>tambah = lambda a, b: a + b\nprint(tambah(3, 4))  # Output: 7\n</code></pre>"},{"location":"List%20Comprehension/#map-transformasi-list","title":"\ud83d\udd39 Map (Transformasi List)","text":"<p><code>map(fungsi, iterable)</code> \u2192 Terapkan fungsi ke setiap elemen dalam list.  </p> <pre><code>angka = [1, 2, 3, 4]\nhasil = list(map(lambda x: x * 2, angka))\nprint(hasil)  # Output: [2, 4, 6, 8]\n</code></pre>"},{"location":"List%20Comprehension/#filter-pilih-elemen-yang-sesuai-kondisi","title":"\ud83d\udd39 Filter (Pilih Elemen yang Sesuai Kondisi)","text":"<p><code>filter(fungsi, iterable)</code> \u2192 Pilih elemen yang memenuhi kondisi tertentu.  </p> <pre><code>genap = list(filter(lambda x: x % 2 == 0, angka))\nprint(genap)  # Output: [2, 4]\n</code></pre>"},{"location":"List%20Comprehension/#reduce-kombinasi-semua-elemen","title":"\ud83d\udd39 Reduce (Kombinasi Semua Elemen)","text":"<p>Gunakan <code>functools.reduce()</code> buat mengakumulasi nilai dalam list.  </p> <pre><code>from functools import reduce\n\ntotal = reduce(lambda a, b: a + b, angka)\nprint(total)  # Output: 10 (1+2+3+4)\n</code></pre>"},{"location":"List%20Comprehension/#3-generator-iterator-menghemat-memori-dengan-lazy-evaluation","title":"\ud83d\udd04 3. Generator &amp; Iterator: Menghemat Memori dengan Lazy Evaluation","text":""},{"location":"List%20Comprehension/#iterator-struktur-data-yang-bisa-diiterasi","title":"\ud83d\udd39 Iterator: Struktur Data yang Bisa Diiterasi","text":"<p>List, Tuple, Set, Dictionary semuanya adalah iterator.  </p> <pre><code>angka = iter([1, 2, 3])  # Ubah list jadi iterator\n\nprint(next(angka))  # Output: 1\nprint(next(angka))  # Output: 2\nprint(next(angka))  # Output: 3\n</code></pre> <p>\ud83d\udccc Kalau <code>next()</code> dipanggil terus &amp; elemen habis, bakal error <code>StopIteration</code>! </p>"},{"location":"List%20Comprehension/#generator-iterasi-tanpa-boros-memori","title":"\ud83d\udd39 Generator: Iterasi Tanpa Boros Memori","text":"<p>Generator mirip function, tapi pakai <code>yield</code> buat menyimpan state terakhir.  </p> <pre><code>def angka_generator():\n    for i in range(1, 4):\n        yield i  # Simpan state tiap kali dipanggil\n\ngen = angka_generator()\n\nprint(next(gen))  # Output: 1\nprint(next(gen))  # Output: 2\nprint(next(gen))  # Output: 3\n</code></pre> <p>\ud83d\udccc Keuntungan Generator: \u2705 Lebih hemat memori dibandingkan list besar. \u2705 Cocok buat data streaming atau perhitungan besar. </p>"},{"location":"List%20Comprehension/#kesimpulan","title":"\ud83c\udfaf Kesimpulan","text":"<p>\u2705 List Comprehension \u2192 Cara cepat bikin list. \u2705 Lambda, Map, Filter, Reduce \u2192 Teknik pemrograman fungsional. \u2705 Generator &amp; Iterator \u2192 Menghemat memori dengan lazy evaluation.  </p> <p>Next: Multi-threading &amp; Async Programming! \ud83d\ude80</p>"},{"location":"Logging%20%26%20Monitoring/","title":"Logging & Monitoring","text":""},{"location":"Logging%20%26%20Monitoring/#logging-monitoring-dalam-python","title":"\ud83d\udccb Logging &amp; Monitoring dalam Python","text":""},{"location":"Logging%20%26%20Monitoring/#kenapa-harus-logging","title":"\ud83e\udde0 Kenapa Harus Logging?","text":"<p>Tanpa logging, ngedebug app itu kayak nyari kunci di hutan malam-malam. Dengan logging, kamu bisa: - Tau error terjadi di mana &amp; kapan - Lacak perilaku pengguna atau sistem - Monitor performa &amp; bottleneck</p> <p>Debugging tanpa logging = Gacha \ud83d\ude29</p>"},{"location":"Logging%20%26%20Monitoring/#logging-vs-print","title":"\ud83d\udd25 Logging vs Print","text":"<pre><code>print(\"Error dong!\")  # \u274c\nlogging.error(\"Terjadi error\")  # \u2705\n</code></pre>"},{"location":"Logging%20%26%20Monitoring/#kelebihan-logging","title":"\u2795 Kelebihan <code>logging</code>:","text":"<ul> <li>Bisa diatur levelnya (info, error, dsb.)</li> <li>Bisa ditulis ke file, bukan cuma terminal</li> <li>Bisa terstruktur rapi &amp; format custom</li> </ul>"},{"location":"Logging%20%26%20Monitoring/#dasar-logging-di-python","title":"\u2699\ufe0f Dasar Logging di Python","text":"<pre><code>import logging\n\nlogging.basicConfig(\n    level=logging.INFO,\n    format=\"%(asctime)s [%(levelname)s] %(message)s\"\n)\n\nlogging.debug(\"Ini debug info (jarang tampil)\")\nlogging.info(\"Aplikasi jalan\")\nlogging.warning(\"Cie warning\")\nlogging.error(\"Ups, ada error\")\nlogging.critical(\"\ud83d\udd25 Server meledak!\")\n</code></pre>"},{"location":"Logging%20%26%20Monitoring/#logging-ke-file","title":"\ud83d\udcc1 Logging ke File","text":"<pre><code>logging.basicConfig(\n    filename=\"app.log\",\n    level=logging.INFO,\n    format=\"%(asctime)s [%(levelname)s] %(message)s\"\n)\n</code></pre> <p>File <code>app.log</code> bakal nyimpen semua log kamu secara otomatis</p>"},{"location":"Logging%20%26%20Monitoring/#level-level-logging","title":"\ud83d\udd00 Level-Level Logging","text":"Level Kegunaan DEBUG Info super detail (dev mode) INFO Info biasa (misal: server jalan) WARNING Sesuatu gak normal tapi gak fatal ERROR Terjadi error, tapi app masih jalan CRITICAL Error fatal, app bisa mati"},{"location":"Logging%20%26%20Monitoring/#logging-modular-gunakan-logger-per-file","title":"\ud83e\udde0 Logging Modular: Gunakan Logger Per File","text":"<pre><code># di file modul.py\nlogger = logging.getLogger(__name__)\nlogger.warning(\"Log dari modul\")\n</code></pre>"},{"location":"Logging%20%26%20Monitoring/#monitoring-level-lanjutan","title":"\ud83d\udce1 Monitoring (Level Lanjutan)","text":"<p>Untuk real-time monitoring, kamu bisa integrasi Python dengan:</p>"},{"location":"Logging%20%26%20Monitoring/#tools-populer","title":"\ud83d\udd27 Tools Populer:","text":"Tool Fungsi Sentry Error tracking, stack trace, dll Prometheus + Grafana Metrics dan visualisasi Logstash + Kibana (ELK) Analisis log skala gede New Relic / Datadog APM dan observability menyeluruh"},{"location":"Logging%20%26%20Monitoring/#contoh-integrasi-dengan-sentry","title":"\ud83d\udce6 Contoh Integrasi dengan Sentry","text":"<pre><code>pip install sentry-sdk\n</code></pre> <pre><code>import sentry_sdk\n\nsentry_sdk.init(\n    dsn=\"https://publickey@o0.ingest.sentry.io/0\",\n    traces_sample_rate=1.0\n)\n</code></pre> <p>Semua error uncaught akan otomatis dikirim ke dashboard Sentry</p>"},{"location":"Logging%20%26%20Monitoring/#best-practices-logging","title":"\u2705 Best Practices Logging","text":"<ul> <li>Jangan pakai <code>print()</code> di production!</li> <li>Simpan log penting di file atau layanan logging</li> <li>Gunakan format standar + timestamp</li> <li>Jangan log data sensitif (password, token, dll)</li> <li>Level log = sesuaikan sama kebutuhan (debug di dev, warning/error di prod)</li> </ul>"},{"location":"Logging%20%26%20Monitoring/#kesimpulan","title":"\ud83d\udccc Kesimpulan","text":"<p>Logging itu seperti CCTV buat aplikasi kamu Tanpa logging? Blind spot everywhere \ud83d\ude35\u200d\ud83d\udcab Dengan logging? Semua kejadian terekam, kamu tinggal playback dan fix \ud83d\udcaa</p>"},{"location":"Logging%20%26%20Monitoring/#tambahan-ke-mkdocsyml","title":"Tambahan ke <code>mkdocs.yml</code>:","text":"<pre><code>  - Logging &amp; Monitoring: Logging &amp; Monitoring.md\n</code></pre> <p>Kalau udah sip, kita bisa lanjut ke next topic! Pilihan selanjutnya: - \ud83d\udd10 Security dalam Python Web Dev - \ud83e\uddea Python untuk Automation &amp; Scripting - \u26a1 Performance Tuning &amp; Profiling Kamu pilih yang mana, sensei Python? \ud83d\udc0d\u2728</p>"},{"location":"Multi%20Threading%20%26%20Async%20Programming/","title":"\u26a1 Multi-threading &amp; Async Programming: Python Super Cepat!","text":"<p>Python mendukung multi-threading dan asynchronous programming buat eksekusi yang lebih cepat &amp; efisien. Ini berguna buat program yang butuh banyak proses berjalan bersamaan, seperti: \u2705 Scraping data dari banyak situs sekaligus \u2705 Proses background (misalnya logging atau notifikasi) \u2705 Aplikasi real-time seperti chat atau server web  </p>"},{"location":"Multi%20Threading%20%26%20Async%20Programming/#1-multi-threading-menjalankan-banyak-tugas-bersamaan","title":"\ud83d\udd04 1. Multi-threading: Menjalankan Banyak Tugas Bersamaan","text":"<p>Python punya modul <code>threading</code> buat menjalankan beberapa tugas di thread berbeda.  </p>"},{"location":"Multi%20Threading%20%26%20Async%20Programming/#contoh-tanpa-multi-threading-lambat","title":"\ud83d\udd39 Contoh Tanpa Multi-threading (Lambat \ud83d\ude34)","text":"<pre><code>import time\n\ndef tugas(nama):\n    print(f\"{nama} mulai...\")\n    time.sleep(2)  # Simulasi tugas berat\n    print(f\"{nama} selesai!\")\n\ntugas(\"Tugas 1\")\ntugas(\"Tugas 2\")\n</code></pre> <p>\ud83d\udccc Outputnya berurutan karena tiap tugas harus selesai dulu sebelum lanjut ke yang lain.</p>"},{"location":"Multi%20Threading%20%26%20Async%20Programming/#dengan-multi-threading-lebih-cepat","title":"\ud83d\udd39 Dengan Multi-threading (Lebih Cepat! \ud83d\ude80)","text":"<pre><code>import threading\nimport time\n\ndef tugas(nama):\n    print(f\"{nama} mulai...\")\n    time.sleep(2)\n    print(f\"{nama} selesai!\")\n\n# Buat thread\nt1 = threading.Thread(target=tugas, args=(\"Tugas 1\",))\nt2 = threading.Thread(target=tugas, args=(\"Tugas 2\",))\n\n# Jalankan thread secara paralel\nt1.start()\nt2.start()\n\n# Tunggu semua thread selesai\nt1.join()\nt2.join()\n\nprint(\"Semua tugas selesai!\")\n</code></pre> <p>\ud83d\udccc Bedanya? \u2705 Lebih cepat karena tugas dijalankan secara paralel \u2705 Cocok buat tugas I/O-bound seperti scraping atau download file  </p>"},{"location":"Multi%20Threading%20%26%20Async%20Programming/#2-asyncio-pemrograman-asynchronous-di-python","title":"\u23f3 2. Asyncio: Pemrograman Asynchronous di Python","text":"<p>Kalau <code>threading</code> bagus buat banyak tugas bersamaan, <code>asyncio</code> lebih optimal buat program yang butuh respons cepat &amp; efisien seperti API, chatbot, atau server web.  </p>"},{"location":"Multi%20Threading%20%26%20Async%20Programming/#contoh-async-dengan-async-dan-await","title":"\ud83d\udd39 Contoh Async dengan <code>async</code> dan <code>await</code>","text":"<pre><code>import asyncio\n\nasync def tugas(nama):\n    print(f\"{nama} mulai...\")\n    await asyncio.sleep(2)  # Tunggu tanpa menghambat tugas lain\n    print(f\"{nama} selesai!\")\n\nasync def main():\n    # Jalankan semua tugas secara async\n    await asyncio.gather(tugas(\"Tugas 1\"), tugas(\"Tugas 2\"))\n\nasyncio.run(main())\n</code></pre> <p>\ud83d\udccc Keuntungan Asyncio: \u2705 Lebih ringan dibandingkan thread biasa \u2705 Cocok buat tugas yang butuh banyak I/O (baca/tulis file, HTTP request, dsb.) </p>"},{"location":"Multi%20Threading%20%26%20Async%20Programming/#kesimpulan","title":"\ud83c\udfaf Kesimpulan","text":"<p>\u2705 Multi-threading \u2192 Jalankan beberapa tugas bersamaan (cocok buat CPU-bound tasks). \u2705 Asyncio \u2192 Eksekusi non-blokir yang lebih efisien (cocok buat I/O-bound tasks).  </p> <p>Next: Database &amp; ORM! \ud83d\ude80</p>"},{"location":"Packaging%20%26%20Management/","title":"Packaging & Management","text":""},{"location":"Packaging%20%26%20Management/#packaging-distribution-di-python","title":"\ud83d\udce6 Packaging &amp; Distribution di Python","text":""},{"location":"Packaging%20%26%20Management/#apa-itu-packaging","title":"\ud83c\udf81 Apa Itu Packaging?","text":"<p>Packaging = proses nge-bungkus project Python kamu jadi bentuk yang bisa: - Diinstall pake <code>pip</code> - Diupload ke PyPI (Python Package Index) - Dipake di mana aja, bukan cuma di laptop kamu</p> <p>Anggap aja kayak ngebungkus mi instan: udah lengkap, tinggal seduh \ud83c\udf5c</p>"},{"location":"Packaging%20%26%20Management/#struktur-folder-project-ideal","title":"\ud83d\udcc1 Struktur Folder Project Ideal","text":"<pre><code>nama_project/\n\u251c\u2500\u2500 src/\n\u2502   \u2514\u2500\u2500 nama_package/\n\u2502       \u251c\u2500\u2500 __init__.py\n\u2502       \u2514\u2500\u2500 modul.py\n\u251c\u2500\u2500 tests/\n\u2502   \u2514\u2500\u2500 test_modul.py\n\u251c\u2500\u2500 pyproject.toml\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 LICENSE\n\u2514\u2500\u2500 setup.cfg / setup.py\n</code></pre>"},{"location":"Packaging%20%26%20Management/#pyprojecttoml-format-modern-recommended","title":"\u2699\ufe0f <code>pyproject.toml</code> (Format Modern &amp; Recommended)","text":"<p>Ini file konfigurasi utama di Python modern.</p>"},{"location":"Packaging%20%26%20Management/#contoh-pyprojecttoml","title":"Contoh <code>pyproject.toml</code>:","text":"<pre><code>[project]\nname = \"nama-paket-keren\"\nversion = \"0.1.0\"\ndescription = \"Ini paket Python buatan saya\"\nauthors = [\n  { name=\"Marno\", email=\"marno@example.com\" }\n]\nreadme = \"README.md\"\nlicense = {text = \"MIT\"}\ndependencies = [\"requests\"]\n\n[build-system]\nrequires = [\"setuptools\", \"wheel\"]\nbuild-backend = \"setuptools.build_meta\"\n</code></pre>"},{"location":"Packaging%20%26%20Management/#cara-build-package","title":"\ud83d\udce6 Cara Build Package","text":""},{"location":"Packaging%20%26%20Management/#1-install-alat-build-nya","title":"1. Install alat build-nya:","text":"<pre><code>pip install build\n</code></pre>"},{"location":"Packaging%20%26%20Management/#2-build","title":"2. Build!","text":"<pre><code>python -m build\n</code></pre> <p>Ini akan membuat folder <code>dist/</code> berisi: - <code>.tar.gz</code> (source archive) - <code>.whl</code> (wheel)</p>"},{"location":"Packaging%20%26%20Management/#upload-ke-pypi","title":"\ud83d\ude80 Upload ke PyPI","text":""},{"location":"Packaging%20%26%20Management/#1-buat-akun-pypi","title":"1. Buat akun PyPI","text":"<p>https://pypi.org/account/register/</p>"},{"location":"Packaging%20%26%20Management/#2-install-twine","title":"2. Install Twine:","text":"<pre><code>pip install twine\n</code></pre>"},{"location":"Packaging%20%26%20Management/#3-upload","title":"3. Upload:","text":"<pre><code>twine upload dist/*\n</code></pre> <p>\ud83d\udca5 Sekarang semua orang bisa install package kamu dengan:</p> <pre><code>pip install nama-paket-keren\n</code></pre>"},{"location":"Packaging%20%26%20Management/#test-upload-ke-test-pypi-dulu","title":"\ud83e\uddea Test Upload ke Test PyPI Dulu","text":"<p>Kalau belum yakin, bisa coba di https://test.pypi.org</p> <pre><code>twine upload --repository testpypi dist/*\n</code></pre> <p>Install dari test PyPI:</p> <pre><code>pip install --index-url https://test.pypi.org/simple/ nama-paket-keren\n</code></pre>"},{"location":"Packaging%20%26%20Management/#tips-best-practice","title":"\u2705 Tips Best Practice","text":"<ul> <li>Tambahkan <code>__init__.py</code> di semua folder</li> <li>Sertakan <code>README.md</code>, <code>LICENSE</code>, <code>CHANGELOG.md</code> (biar pro)</li> <li>Gunakan folder <code>src/</code> agar import lebih aman</li> <li>Gunakan <code>poetry</code> kalau mau cara modern all-in-one</li> <li>Versi naik = ubah <code>version</code> di <code>pyproject.toml</code>!</li> </ul>"},{"location":"Packaging%20%26%20Management/#kesimpulan","title":"\ud83d\udccc Kesimpulan","text":"<p>Packaging &amp; distribusi Python gak sesulit yang kamu bayangin. Sekali ngerti alurnya, kamu bisa punya library sendiri di PyPI dalam waktu kurang dari 15 menit \u23f1\ufe0f\ud83d\udc0d</p> <p>\"From localhost to PyPI, like a boss.\" \ud83d\udcbc\ud83d\udd25</p>"},{"location":"Packaging%20%26%20Management/#tambahan-ke-mkdocsyml","title":"Tambahan ke <code>mkdocs.yml</code>:","text":"<pre><code>  - Packaging &amp; Distribution: Packaging &amp; Distribution.md\n</code></pre> <p>Kalau udah oke, kita lanjut ke topik selanjutnya: Logging &amp; Monitoring atau Security dalam Python Web Dev \u2014 pilih yang mana dulu, chief? \ud83e\udde0\ud83d\udd0d</p>"},{"location":"Pemrograman%20Berbasis%20Objek/","title":"\ud83c\udfd7\ufe0f Pemrograman Berbasis Objek (OOP) di Python","text":"<p>OOP (Object-Oriented Programming) adalah gaya pemrograman yang berfokus pada objek. Konsep ini mempermudah pengelolaan kode, terutama dalam proyek besar.  </p>"},{"location":"Pemrograman%20Berbasis%20Objek/#1-kelas-objek","title":"\ud83c\udfad 1. Kelas &amp; Objek","text":""},{"location":"Pemrograman%20Berbasis%20Objek/#apa-itu-kelas-objek","title":"\ud83d\udd39 Apa Itu Kelas &amp; Objek?","text":"<ul> <li>Kelas (Class) \u2192 Blueprint atau cetakan untuk membuat objek.  </li> <li>Objek \u2192 Hasil nyata yang dibuat dari kelas.  </li> </ul>"},{"location":"Pemrograman%20Berbasis%20Objek/#membuat-kelas-objek","title":"\ud83d\udd39 Membuat Kelas &amp; Objek","text":"<pre><code># Membuat kelas\nclass Mobil:\n    def __init__(self, merk, warna):\n        self.merk = merk\n        self.warna = warna\n\n    def info(self):\n        return f\"Mobil {self.merk} berwarna {self.warna}\"\n\n# Membuat objek dari kelas\nmobil1 = Mobil(\"Toyota\", \"Merah\")\nmobil2 = Mobil(\"Honda\", \"Hitam\")\n\nprint(mobil1.info())  # Output: Mobil Toyota berwarna Merah\nprint(mobil2.info())  # Output: Mobil Honda berwarna Hitam\n</code></pre> <p>\ud83d\udccc <code>__init__</code> \u2192 Constructor, dipanggil saat objek dibuat. \ud83d\udccc <code>self</code> \u2192 Mengacu pada instance objek itu sendiri.  </p>"},{"location":"Pemrograman%20Berbasis%20Objek/#2-atribut-method","title":"\ud83d\udd27 2. Atribut &amp; Method","text":""},{"location":"Pemrograman%20Berbasis%20Objek/#atribut-variabel-dalam-kelas","title":"\ud83d\udd39 Atribut (Variabel dalam Kelas)","text":"<p>Atribut bisa bersifat instance (berbeda tiap objek) atau class (sama untuk semua objek).  </p> <pre><code>class Kucing:\n    spesies = \"Mamalia\"  # Atribut kelas (sama untuk semua objek)\n\n    def __init__(self, nama, umur):\n        self.nama = nama  # Atribut instance\n        self.umur = umur\n\nkucing1 = Kucing(\"Milo\", 3)\nkucing2 = Kucing(\"Luna\", 2)\n\nprint(kucing1.spesies)  # Output: Mamalia\nprint(kucing2.nama)  # Output: Luna\n</code></pre>"},{"location":"Pemrograman%20Berbasis%20Objek/#method-fungsi-dalam-kelas","title":"\ud83d\udd39 Method (Fungsi dalam Kelas)","text":"<pre><code>class Laptop:\n    def __init__(self, merk, harga):\n        self.merk = merk\n        self.harga = harga\n\n    def diskon(self, persen):\n        self.harga -= self.harga * (persen / 100)\n        return f\"Harga setelah diskon: {self.harga}\"\n\nlaptop1 = Laptop(\"Asus\", 10000000)\nprint(laptop1.diskon(10))  # Output: Harga setelah diskon: 9000000\n</code></pre>"},{"location":"Pemrograman%20Berbasis%20Objek/#3-inheritance-pewarisan","title":"\ud83d\udd04 3. Inheritance (Pewarisan)","text":"<p>Pewarisan memungkinkan satu kelas mewarisi atribut &amp; method dari kelas lain.  </p> <pre><code># Kelas Induk\nclass Hewan:\n    def __init__(self, nama):\n        self.nama = nama\n\n    def suara(self):\n        return \"Suara hewan\"\n\n# Kelas Anak (Turunan dari Hewan)\nclass Kucing(Hewan):\n    def suara(self):\n        return \"Meong!\"\n\nkucing1 = Kucing(\"Kitty\")\nprint(kucing1.nama)  # Output: Kitty\nprint(kucing1.suara())  # Output: Meong!\n</code></pre> <p>\ud83d\udccc Kelas <code>Kucing</code> mewarisi <code>Hewan</code>, tapi bisa mengubah (override) method <code>suara()</code>.</p>"},{"location":"Pemrograman%20Berbasis%20Objek/#4-polymorphism-satu-method-banyak-bentuk","title":"\ud83c\udfad 4. Polymorphism (Satu Method, Banyak Bentuk)","text":"<p>Polymorphism memungkinkan method yang sama bekerja berbeda pada kelas yang berbeda.  </p> <pre><code>class Anjing:\n    def suara(self):\n        return \"Guk guk!\"\n\nclass Kucing:\n    def suara(self):\n        return \"Meong!\"\n\n# Contoh Polymorphism\nhewan_list = [Anjing(), Kucing()]\n\nfor hewan in hewan_list:\n    print(hewan.suara())  \n\n# Output:\n# Guk guk!\n# Meong!\n</code></pre>"},{"location":"Pemrograman%20Berbasis%20Objek/#5-encapsulation-membatasi-akses-data","title":"\ud83d\udd12 5. Encapsulation (Membatasi Akses Data)","text":"<p>Encapsulation digunakan untuk menyembunyikan data agar tidak bisa diakses langsung.  </p> <pre><code>class BankAccount:\n    def __init__(self, saldo):\n        self.__saldo = saldo  # Atribut private\n\n    def lihat_saldo(self):\n        return f\"Saldo: {self.__saldo}\"\n\n    def tarik_uang(self, jumlah):\n        if jumlah &lt;= self.__saldo:\n            self.__saldo -= jumlah\n            return f\"Berhasil menarik {jumlah}, sisa saldo: {self.__saldo}\"\n        else:\n            return \"Saldo tidak cukup!\"\n\nrekening = BankAccount(1000000)\nprint(rekening.lihat_saldo())  # Output: Saldo: 1000000\nprint(rekening.tarik_uang(500000))  # Output: Berhasil menarik 500000, sisa saldo: 500000\n\n# print(rekening.__saldo)  # ERROR: Tidak bisa diakses langsung!\n</code></pre> <p>\ud83d\udccc Gunakan dua underscore (<code>__</code>) untuk atribut private. \ud83d\udccc Data bisa diakses lewat method khusus (getter &amp; setter).  </p>"},{"location":"Pemrograman%20Berbasis%20Objek/#kesimpulan","title":"\ud83c\udfaf Kesimpulan","text":"<p>\u2705 Kelas &amp; Objek \u2192 Dasar dari OOP. \u2705 Atribut &amp; Method \u2192 Variabel &amp; fungsi dalam kelas. \u2705 Inheritance \u2192 Pewarisan sifat dari kelas induk. \u2705 Polymorphism \u2192 Method yang sama, hasil berbeda. \u2705 Encapsulation \u2192 Membatasi akses ke data.  </p> <p>Next: Exception Handling (Menangani Error)! \ud83d\ude80</p>"},{"location":"Pengenalan%20Python/","title":"Pengenalan Python","text":""},{"location":"Pengenalan%20Python/#apa-itu-python","title":"\ud83d\udc0d Apa Itu Python?","text":"<p>Python adalah bahasa pemrograman tingkat tinggi yang mudah dibaca, ditulis, dan dipelajari. Dibuat oleh Guido van Rossum pada tahun 1991, Python dirancang untuk memiliki sintaks yang simpel dan bersih, sehingga pemula pun bisa cepat memahami.  </p> <p>Python bisa digunakan untuk berbagai kebutuhan, seperti: \u2705 Web Development (Django, Flask) \u2705 Data Science &amp; Machine Learning (NumPy, Pandas, TensorFlow) \u2705 Automasi &amp; Scripting (Otomatisasi tugas berulang) \u2705 Aplikasi Desktop &amp; Mobile (Kivy, PyQt) \u2705 Cybersecurity &amp; Hacking (Kali Linux, Scapy)  </p>"},{"location":"Pengenalan%20Python/#kenapa-python","title":"\ud83d\udd25 Kenapa Python?","text":""},{"location":"Pengenalan%20Python/#1-mudah-dipelajari-dibaca","title":"1\ufe0f\u20e3 Mudah Dipelajari &amp; Dibaca","text":"<p>Bahasa Python menggunakan sintaks yang hampir menyerupai bahasa manusia. Contohnya:  </p> <p>C++: </p> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main() {\n    cout &lt;&lt; \"Hello, World!\";\n    return 0;\n}\n</code></pre> <p>Python: </p> <pre><code>print(\"Hello, World!\")\n</code></pre> <p>Cuma satu baris! Simpel banget kan? \ud83d\ude06  </p>"},{"location":"Pengenalan%20Python/#2-multiguna-bisa-dipakai-di-mana-saja","title":"2\ufe0f\u20e3 Multiguna (Bisa Dipakai di Mana Saja)","text":"<p>Mau bikin website? Bisa! Mau mainan AI? Bisa! Mau bikin bot otomatis? Bisa!  </p> <p>Python itu multi-purpose, bisa dipakai di berbagai bidang teknologi tanpa perlu belajar bahasa lain.  </p>"},{"location":"Pengenalan%20Python/#3-banyak-library-framework","title":"3\ufe0f\u20e3 Banyak Library &amp; Framework","text":"<p>Python punya ribuan library gratis yang siap pakai. Contohnya: \ud83d\udcca Pandas, NumPy \u2013 Analisis data \ud83e\udd16 TensorFlow, PyTorch \u2013 Machine Learning \ud83c\udf10 Django, Flask \u2013 Web Development \u2699\ufe0f Selenium, BeautifulSoup \u2013 Web Scraping  </p> <p>Jadi, kita nggak perlu bikin semuanya dari nol. Cukup install library dan langsung pakai!  </p>"},{"location":"Pengenalan%20Python/#4-dukungan-komunitas-yang-kuat","title":"4\ufe0f\u20e3 Dukungan Komunitas yang Kuat","text":"<p>Python punya komunitas global yang aktif. Kalau ada masalah, tinggal cari di: - Stack Overflow - GitHub - Dokumentasi Resmi Python  </p> <p>Nggak perlu pusing sendirian, pasti ada yang bisa bantu. \ud83d\ude0e  </p>"},{"location":"Pengenalan%20Python/#5-digunakan-perusahaan-besar","title":"5\ufe0f\u20e3 Digunakan Perusahaan Besar","text":"<p>Banyak perusahaan top dunia yang pakai Python, contohnya: \ud83d\udc0d Google \u2192 Backend &amp; AI \ud83d\udce6 Amazon \u2192 Data Science &amp; Automasi \ud83d\udcf1 Instagram \u2192 Web Development \ud83c\udfae Ubisoft \u2192 Game Development  </p> <p>Python itu future-proof, jadi belajar sekarang bakal kepake terus ke depannya. \ud83d\ude80  </p>"},{"location":"Pengenalan%20Python/#kesimpulan","title":"\u2705 Kesimpulan","text":"<p>Python itu mudah, fleksibel, dan powerful. Dari pemula sampai expert bisa pakai Python buat berbagai proyek. Jadi, kalau mau belajar coding dengan santai tapi tetap kuat, Python adalah pilihan terbaik! \ud83d\ude0d\ud83d\udd25</p>"},{"location":"Program%20Modular/","title":"\ud83c\udfd7\ufe0f Pemrograman Modular di Python","text":"<p>Pemrograman modular adalah teknik membagi kode ke dalam bagian-bagian kecil yang bisa digunakan kembali. Ini bikin kode lebih rapi, mudah dikelola, dan scalable.  </p>"},{"location":"Program%20Modular/#1-import-modul","title":"\ud83d\udccc 1. Import &amp; Modul","text":""},{"location":"Program%20Modular/#apa-itu-modul","title":"\ud83d\udd39 Apa Itu Modul?","text":"<p>Modul adalah file Python yang berisi fungsi, variabel, atau kelas yang bisa digunakan di file lain.  </p> <p>\ud83d\udccc Contoh Modul Bawaan Python: - <code>math</code> \u2192 Operasi matematika - <code>random</code> \u2192 Angka acak - <code>datetime</code> \u2192 Waktu &amp; tanggal - <code>os</code> \u2192 Operasi sistem  </p>"},{"location":"Program%20Modular/#cara-import-modul","title":"\ud83d\udd39 Cara Import Modul","text":"<pre><code>import math  # Mengimpor seluruh modul\nprint(math.sqrt(16))  # Output: 4.0\n\nfrom math import sqrt  # Mengimpor fungsi tertentu\nprint(sqrt(25))  # Output: 5.0\n\nimport random as rnd  # Mengubah nama modul (alias)\nprint(rnd.randint(1, 10))  # Angka acak antara 1-10\n</code></pre> <p>\ud83d\udccc Tips: - Pakai <code>import modul</code> untuk mengimpor semuanya. - Pakai <code>from modul import fungsi</code> kalau cuma butuh fungsi tertentu. - Pakai <code>import modul as alias</code> kalau mau nama lebih singkat.  </p>"},{"location":"Program%20Modular/#2-membuat-modul-sendiri","title":"\ud83d\udee0\ufe0f 2. Membuat Modul Sendiri","text":"<p>Kita bisa bikin modul sendiri dengan menyimpan kode Python ke file <code>.py</code> dan mengimpornya ke program utama.  </p>"},{"location":"Program%20Modular/#1-buat-file-modulkupy","title":"\ud83d\udd39 1. Buat File <code>modulku.py</code>","text":"<pre><code># modulku.py\ndef sapa(nama):\n    return f\"Halo, {nama}! Selamat datang di Python.\"\n</code></pre>"},{"location":"Program%20Modular/#2-gunakan-di-program-utama-mainpy","title":"\ud83d\udd39 2. Gunakan di Program Utama (<code>main.py</code>)","text":"<pre><code>import modulku\n\nprint(modulku.sapa(\"Adit\"))  # Output: Halo, Adit! Selamat datang di Python.\n</code></pre>"},{"location":"Program%20Modular/#3-cara-lain-import-fungsi-tertentu","title":"\ud83d\udd39 3. Cara Lain: Import Fungsi Tertentu","text":"<pre><code>from modulku import sapa\n\nprint(sapa(\"Budi\"))  # Output: Halo, Budi! Selamat datang di Python.\n</code></pre> <p>\ud83d\udccc Keuntungan Modul: \u2705 Bisa digunakan ulang tanpa harus menulis ulang kode. \u2705 Kode lebih rapi dan modular.  </p>"},{"location":"Program%20Modular/#3-__name__-__main__-itu-apa","title":"\ud83e\udd2f 3. <code>__name__ == \"__main__\"</code> itu Apa?","text":"<p>Ini digunakan untuk menentukan apakah file Python sedang dijalankan langsung atau diimpor sebagai modul.  </p>"},{"location":"Program%20Modular/#contoh-sederhana","title":"\ud83d\udd39 Contoh Sederhana","text":"<pre><code># file: contoh.py\ndef salam():\n    print(\"Halo dari contoh.py!\")\n\nif __name__ == \"__main__\":\n    print(\"File ini dijalankan langsung.\")\n    salam()\n</code></pre>"},{"location":"Program%20Modular/#uji-coba-di-program-utama","title":"\ud83d\udd39 Uji Coba di Program Utama","text":"<pre><code>import contoh  # Mengimpor file contoh.py\n\nprint(\"Program utama berjalan.\")\n</code></pre> <p>\ud83d\udccc Hasilnya: Jika kita menjalankan <code>contoh.py</code> langsung, outputnya:  </p> <pre><code>File ini dijalankan langsung.\nHalo dari contoh.py!\n</code></pre> <p>Jika kita mengimpor <code>contoh.py</code> dari file lain, outputnya:  </p> <pre><code>Program utama berjalan.\n</code></pre> <p>\ud83d\udca1 Intinya: - <code>if __name__ == \"__main__\":</code> memastikan kode hanya berjalan jika file dieksekusi langsung. - Berguna buat testing modul tanpa mengganggu program lain.  </p>"},{"location":"Program%20Modular/#kesimpulan","title":"\ud83c\udfaf Kesimpulan","text":"<p>\u2705 Modul bikin kode lebih rapi &amp; bisa digunakan ulang. \u2705 Python punya banyak modul bawaan (math, random, os, dll.). \u2705 Bisa bikin modul sendiri dengan menyimpannya sebagai file <code>.py</code>. \u2705 <code>__name__ == \"__main__\"</code> digunakan untuk membedakan apakah file dijalankan langsung atau diimpor.  </p> <p>Next: Exception Handling (Menangani Error)! \ud83d\ude80</p>"},{"location":"Python%20untuk%20Blockchain%20%26%20Cryptocurrency/","title":"\ud83d\udd17 Python untuk Blockchain &amp; Cryptocurrency","text":"<p>Python banyak digunakan dalam dunia Blockchain dan Cryptocurrency untuk membuat smart contract, mining, dan transaksi crypto.  </p>"},{"location":"Python%20untuk%20Blockchain%20%26%20Cryptocurrency/#1-membuat-blockchain-sederhana-dengan-python","title":"\u26cf 1. Membuat Blockchain Sederhana dengan Python","text":"<p>\ud83d\udccc Gunakan <code>hashlib</code> untuk membuat sistem blockchain dasar </p> <pre><code>import hashlib\nimport time\n\nclass Block:\n    def __init__(self, index, previous_hash, data):\n        self.index = index\n        self.timestamp = time.time()\n        self.data = data\n        self.previous_hash = previous_hash\n        self.hash = self.calculate_hash()\n\n    def calculate_hash(self):\n        block_string = f\"{self.index}{self.timestamp}{self.data}{self.previous_hash}\"\n        return hashlib.sha256(block_string.encode()).hexdigest()\n\n# Membuat blockchain\nblockchain = [Block(0, \"0\", \"Genesis Block\")]\n\n# Menambahkan blok baru\ndef add_block(data):\n    prev_block = blockchain[-1]\n    new_block = Block(len(blockchain), prev_block.hash, data)\n    blockchain.append(new_block)\n\n# Tambahkan beberapa blok\nadd_block(\"Transaksi A ke B: 5 BTC\")\nadd_block(\"Transaksi B ke C: 2 BTC\")\n\n# Cetak blockchain\nfor block in blockchain:\n    print(f\"Index: {block.index}, Hash: {block.hash}, Data: {block.data}\")\n</code></pre> <p>\u2705 Ini adalah dasar dari teknologi blockchain yang digunakan Bitcoin! </p>"},{"location":"Python%20untuk%20Blockchain%20%26%20Cryptocurrency/#2-menggunakan-api-untuk-cek-harga-crypto","title":"\ud83d\udcb0 2. Menggunakan API untuk Cek Harga Crypto","text":"<p>\ud83d\udccc Gunakan API CoinGecko untuk mengambil harga crypto secara real-time </p> <pre><code>pip install requests\n</code></pre> <pre><code>import requests\n\nurl = \"https://api.coingecko.com/api/v3/simple/price?ids=bitcoin,ethereum&amp;vs_currencies=usd\"\nresponse = requests.get(url).json()\n\nprint(f\"Bitcoin: ${response['bitcoin']['usd']}\")\nprint(f\"Ethereum: ${response['ethereum']['usd']}\")\n</code></pre> <p>\u2705 Dapatkan harga terbaru BTC &amp; ETH langsung dari API! </p>"},{"location":"Python%20untuk%20Blockchain%20%26%20Cryptocurrency/#3-membuat-private-public-key-dengan-python","title":"\ud83d\udd10 3. Membuat Private &amp; Public Key dengan Python","text":"<p>\ud83d\udccc Gunakan <code>ecdsa</code> untuk membuat sistem kriptografi kunci publik </p> <pre><code>pip install ecdsa\n</code></pre> <pre><code>from ecdsa import SigningKey, SECP256k1\n\n# Generate private key\nprivate_key = SigningKey.generate(curve=SECP256k1)\npublic_key = private_key.get_verifying_key()\n\nprint(\"Private Key:\", private_key.to_string().hex())\nprint(\"Public Key:\", public_key.to_string().hex())\n</code></pre> <p>\u2705 Dasar dari wallet cryptocurrency seperti Bitcoin &amp; Ethereum! </p>"},{"location":"Python%20untuk%20Blockchain%20%26%20Cryptocurrency/#4-membuat-transaksi-crypto-sederhana","title":"\ud83d\udcdc 4. Membuat Transaksi Crypto Sederhana","text":"<p>\ud83d\udccc Format transaksi dengan hashing (tanpa jaringan blockchain) </p> <pre><code>import hashlib\n\ndef create_transaction(sender, receiver, amount):\n    tx_data = f\"{sender}-&gt;{receiver}:{amount}\"\n    tx_hash = hashlib.sha256(tx_data.encode()).hexdigest()\n    return {\"transaction\": tx_data, \"hash\": tx_hash}\n\ntx = create_transaction(\"Alice\", \"Bob\", 1.5)\nprint(tx)\n</code></pre> <p>\u2705 Simulasi transaksi sederhana tanpa blockchain! </p>"},{"location":"Python%20untuk%20Blockchain%20%26%20Cryptocurrency/#kesimpulan","title":"\ud83c\udfaf Kesimpulan","text":"<p>\u2705 Blockchain Dasar \u2192 Memahami cara kerja blok &amp; hash \u2705 Cek Harga Crypto \u2192 Menggunakan API CoinGecko \u2705 Public &amp; Private Key \u2192 Dasar dari wallet crypto \u2705 Simulasi Transaksi \u2192 Cara kerja transaksi digital  </p> <p>Next: Python untuk Internet of Things (IoT)! \ud83c\udf0d</p>"},{"location":"Python%20untuk%20Cybersecurity/","title":"\ud83d\udd12 Python untuk Cybersecurity","text":"<p>Python sering digunakan dalam dunia Cybersecurity untuk penetration testing, enkripsi data, analisis malware, dan otomatisasi keamanan.  </p>"},{"location":"Python%20untuk%20Cybersecurity/#1-membuat-password-generator-otomatis","title":"\ud83d\udd75 1. Membuat Password Generator Otomatis","text":"<p>\ud83d\udccc Gunakan <code>random</code> dan <code>string</code> untuk membuat password yang kuat </p> <pre><code>import random\nimport string\n\ndef generate_password(length=12):\n    karakter = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(karakter) for _ in range(length))\n    return password\n\nprint(\"Password baru:\", generate_password())\n</code></pre> <p>\u2705 Hasil: Password acak yang sulit ditebak! </p>"},{"location":"Python%20untuk%20Cybersecurity/#2-enkripsi-dekripsi-dengan-python-fernet-symmetric-encryption","title":"\ud83d\udd11 2. Enkripsi &amp; Dekripsi dengan Python (Fernet - Symmetric Encryption)","text":"<p>\ud83d\udccc Gunakan <code>cryptography</code> untuk mengenkripsi data </p> <pre><code>pip install cryptography\n</code></pre> <pre><code>from cryptography.fernet import Fernet\n\n# Buat kunci enkripsi\nkey = Fernet.generate_key()\ncipher = Fernet(key)\n\n# Enkripsi pesan\npesan = \"Ini adalah data rahasia.\"\npesan_terenkripsi = cipher.encrypt(pesan.encode())\nprint(\"Terenkripsi:\", pesan_terenkripsi)\n\n# Dekripsi pesan\npesan_dekripsi = cipher.decrypt(pesan_terenkripsi).decode()\nprint(\"Didekripsi:\", pesan_dekripsi)\n</code></pre> <p>\u2705 Cocok buat menyimpan data sensitif dengan aman! </p>"},{"location":"Python%20untuk%20Cybersecurity/#3-scan-port-terbuka-dengan-python-port-scanner","title":"\ud83d\udd75 3. Scan Port Terbuka dengan Python (Port Scanner)","text":"<p>\ud83d\udccc Gunakan <code>socket</code> untuk mengecek apakah suatu port terbuka atau tertutup </p> <pre><code>import socket\n\ndef scan_port(ip, port):\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    s.settimeout(1)\n    result = s.connect_ex((ip, port))\n    s.close()\n    return result == 0\n\ntarget = \"192.168.1.1\"\nports = [21, 22, 80, 443, 3306]  # Port umum\n\nfor port in ports:\n    if scan_port(target, port):\n        print(f\"Port {port} terbuka!\")\n    else:\n        print(f\"Port {port} tertutup.\")\n</code></pre> <p>\u2705 Digunakan untuk mengecek keamanan jaringan! </p>"},{"location":"Python%20untuk%20Cybersecurity/#4-web-scraping-aman-dengan-requests-beautifulsoup","title":"\ud83c\udfad 4. Web Scraping Aman dengan Requests &amp; BeautifulSoup","text":"<p>\ud83d\udccc Gunakan <code>requests</code> &amp; <code>BeautifulSoup</code> untuk mengambil data dari web dengan aman </p> <pre><code>pip install requests beautifulsoup4\n</code></pre> <pre><code>import requests\nfrom bs4 import BeautifulSoup\n\nurl = \"https://example.com\"\nheaders = {\"User-Agent\": \"Mozilla/5.0\"}\n\nresponse = requests.get(url, headers=headers)\nsoup = BeautifulSoup(response.text, \"html.parser\")\n\nprint(\"Judul Halaman:\", soup.title.text)\n</code></pre> <p>\u2705 Pastikan tidak scraping website tanpa izin! \ud83d\udea8  </p>"},{"location":"Python%20untuk%20Cybersecurity/#kesimpulan","title":"\ud83c\udfaf Kesimpulan","text":"<p>\u2705 Password Generator \u2192 Buat password yang kuat \u2705 Enkripsi &amp; Dekripsi \u2192 Lindungi data penting \u2705 Port Scanner \u2192 Cek keamanan jaringan \u2705 Web Scraping Aman \u2192 Ambil data dari web dengan etika  </p> <p>Next: Python untuk Blockchain &amp; Crypto! \ud83d\ude80</p>"},{"location":"Python%20untuk%20Cybersecurity/#versi-2","title":"Versi 2","text":""},{"location":"Python%20untuk%20Cybersecurity/#python-untuk-cybersecurity_1","title":"\ud83d\udd10 Python untuk Cybersecurity","text":"<p>Python banyak digunakan dalam Cybersecurity untuk analisis malware, pemindaian jaringan, eksploitasi keamanan, hingga forensik digital.  </p>"},{"location":"Python%20untuk%20Cybersecurity/#1-instalasi-setup-alat-cybersecurity","title":"\ud83d\udee0 1. Instalasi &amp; Setup Alat Cybersecurity","text":"<p>\ud83d\udccc Install pustaka yang sering digunakan dalam Cybersecurity </p> <pre><code>pip install scapy cryptography requests\n</code></pre> <p>\u2705 Siap digunakan untuk ethical hacking dan analisis keamanan! </p>"},{"location":"Python%20untuk%20Cybersecurity/#2-pemindaian-jaringan-dengan-scapy","title":"\ud83c\udf10 2. Pemindaian Jaringan dengan Scapy","text":"<p>\ud83d\udccc Gunakan Scapy untuk melihat perangkat yang terhubung ke jaringan </p> <pre><code>from scapy.all import ARP, Ether, srp\n\n# Buat paket ARP Request\ntarget_ip = \"192.168.1.1/24\"  \narp = ARP(pdst=target_ip)\nether = Ether(dst=\"ff:ff:ff:ff:ff:ff\")\npacket = ether / arp\n\n# Kirim paket dan dapatkan respons\nresult = srp(packet, timeout=3, verbose=0)[0]\n\n# Tampilkan hasil\ndevices = []\nfor sent, received in result:\n    devices.append({\"IP\": received.psrc, \"MAC\": received.hwsrc})\n\n# Cetak daftar perangkat yang ditemukan\nfor device in devices:\n    print(f\"IP: {device['IP']}, MAC: {device['MAC']}\")\n</code></pre> <p>\u2705 Bisa digunakan untuk mendeteksi perangkat dalam satu jaringan! </p>"},{"location":"Python%20untuk%20Cybersecurity/#3-enkripsi-dekripsi-data-dengan-python","title":"\ud83d\udd11 3. Enkripsi &amp; Dekripsi Data dengan Python","text":"<p>\ud83d\udccc Gunakan pustaka <code>cryptography</code> untuk mengamankan data </p> <pre><code>from cryptography.fernet import Fernet\n\n# Buat kunci enkripsi\nkey = Fernet.generate_key()\ncipher = Fernet(key)\n\n# Enkripsi pesan\npesan = \"Ini adalah data rahasia\"\nencrypted_pesan = cipher.encrypt(pesan.encode())\nprint(f\"Pesan terenkripsi: {encrypted_pesan}\")\n\n# Dekripsi pesan\ndecrypted_pesan = cipher.decrypt(encrypted_pesan).decode()\nprint(f\"Pesan asli: {decrypted_pesan}\")\n</code></pre> <p>\u2705 Bisa digunakan untuk menyimpan data sensitif dengan aman! </p>"},{"location":"Python%20untuk%20Cybersecurity/#4-cek-kelemahan-website-dengan-python","title":"\ud83d\udd75\ufe0f 4. Cek Kelemahan Website dengan Python","text":"<p>\ud83d\udccc Gunakan <code>requests</code> untuk mendeteksi celah keamanan sederhana </p> <pre><code>import requests\n\n# Target URL\nurl = \"http://example.com/login.php\"\n\n# Uji SQL Injection sederhana\npayload = {\"username\": \"admin' --\", \"password\": \"password\"}\nresponse = requests.post(url, data=payload)\n\n# Jika berhasil login tanpa password, berarti ada celah SQL Injection\nif \"Welcome\" in response.text:\n    print(\"Website rentan terhadap SQL Injection!\")\nelse:\n    print(\"Website aman dari SQL Injection.\")\n</code></pre> <p>\u2705 Bisa digunakan untuk menguji keamanan website secara etis! </p>"},{"location":"Python%20untuk%20Cybersecurity/#kesimpulan_1","title":"\ud83c\udfaf Kesimpulan","text":"<p>\u2705 Pemindaian Jaringan \u2192 Gunakan Scapy untuk mendeteksi perangkat \u2705 Enkripsi Data \u2192 Gunakan <code>cryptography</code> untuk keamanan data \u2705 Cek Keamanan Website \u2192 Gunakan <code>requests</code> untuk uji celah keamanan \u2705 Python sangat cocok untuk Cybersecurity! </p> <p>Next: Python untuk Blockchain &amp; Cryptocurrency! \u26d3\ufe0f</p>"},{"location":"Python%20untuk%20Data%20Science/","title":"\ud83d\udcca Python untuk Data Science","text":"<p>Python adalah bahasa utama dalam Data Science karena memiliki pustaka yang kuat untuk analisis data, visualisasi, dan machine learning seperti Pandas, NumPy, Matplotlib, dan Seaborn.  </p>"},{"location":"Python%20untuk%20Data%20Science/#1-instalasi-setup-data-science-di-python","title":"\ud83d\udd27 1. Instalasi &amp; Setup Data Science di Python","text":"<p>\ud83d\udccc Install pustaka yang dibutuhkan </p> <pre><code>pip install numpy pandas matplotlib seaborn\n</code></pre> <p>\u2705 Sekarang kita siap menganalisis data! </p>"},{"location":"Python%20untuk%20Data%20Science/#2-baca-manipulasi-data-dengan-pandas","title":"\ud83d\udcc2 2. Baca &amp; Manipulasi Data dengan Pandas","text":"<p>\ud83d\udccc Baca dataset CSV dan tampilkan informasi dasar </p> <pre><code>import pandas as pd\n\n# Load dataset\ndf = pd.read_csv(\"data.csv\")\n\n# Tampilkan 5 baris pertama\nprint(df.head())\n\n# Cek info dataset\nprint(df.info())\nprint(df.describe())\n</code></pre> <p>\u2705 Gunakan Pandas untuk mengolah data dengan mudah! </p> <p>\ud83d\udccc Menghapus kolom atau baris yang memiliki nilai kosong </p> <pre><code>df.dropna(inplace=True)  # Hapus baris dengan nilai kosong\ndf.drop(columns=[\"KolomTidakPenting\"], inplace=True)  # Hapus kolom tertentu\n</code></pre> <p>\u2705 Bersihkan data sebelum dianalisis! </p>"},{"location":"Python%20untuk%20Data%20Science/#3-visualisasi-data-dengan-matplotlib-seaborn","title":"\ud83d\udcc8 3. Visualisasi Data dengan Matplotlib &amp; Seaborn","text":"<p>\ud83d\udccc Buat grafik sederhana untuk memahami data </p> <pre><code>import matplotlib.pyplot as plt\n\n# Buat grafik batang\ndf[\"Kategori\"].value_counts().plot(kind=\"bar\", color=\"skyblue\")\nplt.title(\"Distribusi Kategori\")\nplt.xlabel(\"Kategori\")\nplt.ylabel(\"Jumlah\")\nplt.show()\n</code></pre> <p>\u2705 Bisa memahami tren data dengan cepat! </p> <p>\ud83d\udccc Gunakan Seaborn untuk visualisasi yang lebih menarik </p> <pre><code>import seaborn as sns\n\n# Scatter plot hubungan antara dua variabel\nsns.scatterplot(x=\"Pendapatan\", y=\"Pengeluaran\", data=df)\nplt.title(\"Hubungan Pendapatan vs Pengeluaran\")\nplt.show()\n</code></pre> <p>\u2705 Bisa melihat pola dalam dataset dengan lebih jelas! </p>"},{"location":"Python%20untuk%20Data%20Science/#4-analisis-statistik-data","title":"\ud83d\udcca 4. Analisis Statistik Data","text":"<p>\ud83d\udccc Hitung korelasi antar variabel untuk menemukan hubungan dalam data </p> <pre><code>print(df.corr())  # Hitung korelasi antar kolom\n</code></pre> <p>\ud83d\udccc Visualisasi korelasi dengan heatmap </p> <pre><code>sns.heatmap(df.corr(), annot=True, cmap=\"coolwarm\")\nplt.title(\"Heatmap Korelasi\")\nplt.show()\n</code></pre> <p>\u2705 Mengetahui hubungan antar variabel sebelum analisis lebih lanjut! </p>"},{"location":"Python%20untuk%20Data%20Science/#kesimpulan","title":"\ud83c\udfaf Kesimpulan","text":"<p>\u2705 Baca &amp; Bersihkan Data \u2192 Gunakan Pandas \u2705 Visualisasi Data \u2192 Pakai Matplotlib &amp; Seaborn \u2705 Analisis Statistik \u2192 Lihat korelasi antar variabel \u2705 Data Science Siap Dipakai! </p> <p>Next: Python untuk Cybersecurity! \ud83d\udd10</p>"},{"location":"Python%20untuk%20Game%20Development/","title":"\ud83c\udfae Python untuk Game Development","text":"<p>Python bisa digunakan untuk membuat game dengan pustaka seperti Pygame, Panda3D, dan Godot. Kita bisa membuat game 2D &amp; 3D, mulai dari yang sederhana hingga kompleks!  </p>"},{"location":"Python%20untuk%20Game%20Development/#1-membuat-game-sederhana-dengan-pygame","title":"\ud83d\udd79 1. Membuat Game Sederhana dengan Pygame","text":"<p>\ud83d\udccc Instal Pygame terlebih dahulu </p> <pre><code>pip install pygame\n</code></pre> <p>\ud83d\udccc Kode untuk membuat game \"Kotak Bergerak\" </p> <pre><code>import pygame\n\n# Inisialisasi Pygame\npygame.init()\n\n# Atur layar\nWIDTH, HEIGHT = 500, 500\nscreen = pygame.display.set_mode((WIDTH, HEIGHT))\npygame.display.set_caption(\"Game Kotak Bergerak\")\n\n# Warna &amp; Posisi\nWHITE = (255, 255, 255)\nBLUE = (0, 0, 255)\nx, y = 200, 200\nspeed = 5\n\n# Loop Game\nrunning = True\nwhile running:\n    pygame.time.delay(50)\n    screen.fill(WHITE)\n\n    # Event Handling\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            running = False\n\n    # Kontrol dengan Keyboard\n    keys = pygame.key.get_pressed()\n    if keys[pygame.K_LEFT]: x -= speed\n    if keys[pygame.K_RIGHT]: x += speed\n    if keys[pygame.K_UP]: y -= speed\n    if keys[pygame.K_DOWN]: y += speed\n\n    # Gambar Kotak\n    pygame.draw.rect(screen, BLUE, (x, y, 50, 50))\n    pygame.display.update()\n\npygame.quit()\n</code></pre> <p>\u2705 Cocok buat latihan dasar game development! </p>"},{"location":"Python%20untuk%20Game%20Development/#2-menambahkan-karakter-animasi","title":"\ud83d\udc7e 2. Menambahkan Karakter &amp; Animasi","text":"<p>\ud83d\udccc Tambahkan sprite karakter agar lebih menarik! </p> <pre><code>player = pygame.image.load(\"karakter.png\")  # Pastikan ada gambar karakter\nscreen.blit(player, (x, y))\npygame.display.update()\n</code></pre> <p>\u2705 Bisa dikembangkan jadi game platformer! </p>"},{"location":"Python%20untuk%20Game%20Development/#3-menambahkan-suara-ke-game","title":"\ud83d\udd0a 3. Menambahkan Suara ke Game","text":"<p>\ud83d\udccc Gunakan <code>pygame.mixer</code> untuk menambahkan efek suara </p> <pre><code>pygame.mixer.init()\nsuara = pygame.mixer.Sound(\"jump.wav\")  # Pastikan ada file suara\nsuara.play()\n</code></pre> <p>\u2705 Game jadi lebih hidup dengan efek suara! </p>"},{"location":"Python%20untuk%20Game%20Development/#4-membuat-game-multiplayer-dengan-python","title":"\ud83c\udfaf 4. Membuat Game Multiplayer dengan Python","text":"<p>\ud83d\udccc Gunakan <code>socket</code> untuk multiplayer game sederhana </p> <pre><code>import socket\n\nserver = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nserver.bind((\"localhost\", 5555))\nserver.listen()\n\nprint(\"Menunggu pemain lain...\")\nclient, addr = server.accept()\nprint(f\"Pemain lain terhubung dari {addr}\")\n</code></pre> <p>\u2705 Bisa dikembangkan menjadi game online sederhana! </p>"},{"location":"Python%20untuk%20Game%20Development/#kesimpulan","title":"\ud83c\udfaf Kesimpulan","text":"<p>\u2705 Buat Game Sederhana \u2192 Gunakan Pygame \u2705 Tambahkan Sprite &amp; Animasi \u2192 Pakai <code>pygame.image</code> \u2705 Gunakan Suara \u2192 Pakai <code>pygame.mixer</code> \u2705 Game Multiplayer \u2192 Gunakan <code>socket</code> untuk komunikasi antar pemain  </p> <p>Next: Python untuk Machine Learning! \ud83e\udd16</p>"},{"location":"Python%20untuk%20Internet%20of%20Things%20%28IoT%29/","title":"\ud83c\udf0d Python untuk Internet of Things (IoT)","text":"<p>Python sering digunakan dalam IoT (Internet of Things) untuk mengontrol sensor, perangkat pintar, dan mengolah data dari hardware seperti Raspberry Pi, Arduino, dan ESP8266.  </p>"},{"location":"Python%20untuk%20Internet%20of%20Things%20%28IoT%29/#1-membaca-data-sensor-dengan-raspberry-pi","title":"\ud83d\udce1 1. Membaca Data Sensor dengan Raspberry Pi","text":"<p>\ud83d\udccc Gunakan <code>gpiozero</code> untuk membaca sensor suhu </p> <pre><code>pip install gpiozero\n</code></pre> <pre><code>from gpiozero import MCP3008\nimport time\n\nsensor = MCP3008(channel=0)  # Menghubungkan sensor ke channel 0\n\nwhile True:\n    suhu = sensor.value * 100  # Konversi ke suhu\n    print(f\"Suhu: {suhu:.2f}\u00b0C\")\n    time.sleep(1)\n</code></pre> <p>\u2705 Bisa digunakan untuk proyek Smart Home! </p>"},{"location":"Python%20untuk%20Internet%20of%20Things%20%28IoT%29/#2-mengontrol-led-dengan-raspberry-pi-python","title":"\ud83d\udcf6 2. Mengontrol LED dengan Raspberry Pi &amp; Python","text":"<p>\ud83d\udccc Gunakan <code>RPi.GPIO</code> untuk menyalakan/mematikan LED </p> <pre><code>import RPi.GPIO as GPIO\nimport time\n\nGPIO.setmode(GPIO.BCM)\nGPIO.setup(18, GPIO.OUT)\n\n# Nyalakan &amp; Matikan LED setiap 1 detik\nwhile True:\n    GPIO.output(18, GPIO.HIGH)\n    time.sleep(1)\n    GPIO.output(18, GPIO.LOW)\n    time.sleep(1)\n</code></pre> <p>\u2705 Bisa dikembangkan menjadi sistem IoT otomatis! </p>"},{"location":"Python%20untuk%20Internet%20of%20Things%20%28IoT%29/#3-mengirim-data-sensor-ke-cloud-mqtt-protocol","title":"\ud83c\udf10 3. Mengirim Data Sensor ke Cloud (MQTT Protocol)","text":"<p>\ud83d\udccc Gunakan MQTT (<code>paho-mqtt</code>) untuk komunikasi IoT ke Cloud </p> <pre><code>pip install paho-mqtt\n</code></pre> <pre><code>import paho.mqtt.client as mqtt\n\nbroker = \"mqtt.eclipseprojects.io\"\ntopic = \"sensor/suhu\"\n\nclient = mqtt.Client()\nclient.connect(broker, 1883, 60)\n\n# Kirim data suhu ke MQTT Broker\nclient.publish(topic, \"Suhu sekarang: 30\u00b0C\")\nprint(\"Data dikirim!\")\n</code></pre> <p>\u2705 Bisa digunakan untuk menghubungkan IoT dengan aplikasi berbasis cloud! </p>"},{"location":"Python%20untuk%20Internet%20of%20Things%20%28IoT%29/#4-mengontrol-perangkat-iot-dari-hp-dengan-flask-api","title":"\ud83d\udcf2 4. Mengontrol Perangkat IoT dari HP dengan Flask API","text":"<p>\ud83d\udccc Gunakan Flask untuk membuat API sederhana yang bisa dikontrol dari HP </p> <pre><code>pip install flask\n</code></pre> <pre><code>from flask import Flask\n\napp = Flask(__name__)\n\n@app.route(\"/led/on\")\ndef led_on():\n    return \"LED menyala!\"\n\n@app.route(\"/led/off\")\ndef led_off():\n    return \"LED mati!\"\n\nif __name__ == \"__main__\":\n    app.run(host=\"0.0.0.0\", port=5000)\n</code></pre> <p>\u2705 Bisa diakses dari HP untuk mengontrol perangkat IoT! </p>"},{"location":"Python%20untuk%20Internet%20of%20Things%20%28IoT%29/#kesimpulan","title":"\ud83c\udfaf Kesimpulan","text":"<p>\u2705 Baca Data Sensor \u2192 Gunakan <code>gpiozero</code> untuk membaca sensor suhu \u2705 Kontrol Perangkat IoT \u2192 Gunakan <code>RPi.GPIO</code> untuk menyalakan LED \u2705 Kirim Data ke Cloud \u2192 Gunakan MQTT untuk komunikasi IoT \u2705 Buat API IoT \u2192 Gunakan Flask untuk kontrol dari HP  </p> <p>Next: Python untuk Game Development! \ud83c\udfae</p>"},{"location":"Python%20untuk%20Machine%20Learning/","title":"\ud83e\udd16 Python untuk Machine Learning","text":"<p>Python adalah bahasa utama dalam Machine Learning (ML) karena memiliki banyak pustaka canggih seperti NumPy, Pandas, Scikit-Learn, TensorFlow, dan PyTorch.  </p>"},{"location":"Python%20untuk%20Machine%20Learning/#1-instalasi-setup-ml-di-python","title":"\ud83d\udcca 1. Instalasi &amp; Setup ML di Python","text":"<p>\ud83d\udccc Install pustaka yang dibutuhkan </p> <pre><code>pip install numpy pandas scikit-learn matplotlib seaborn\n</code></pre> <p>\u2705 Sekarang siap untuk mulai belajar ML! </p>"},{"location":"Python%20untuk%20Machine%20Learning/#2-membuat-model-prediksi-sederhana","title":"\ud83d\udcc9 2. Membuat Model Prediksi Sederhana","text":"<p>\ud83d\udccc Gunakan Scikit-Learn untuk prediksi harga rumah berdasarkan luasnya </p> <pre><code>import numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# Data: Luas rumah (m\u00b2) &amp; Harga (juta)\nX = np.array([[30], [50], [70], [100], [120]])  # Luas rumah\ny = np.array([300, 500, 700, 1000, 1200])  # Harga rumah\n\n# Model ML\nmodel = LinearRegression()\nmodel.fit(X, y)\n\n# Prediksi harga rumah dengan luas 90m\u00b2\nprediksi = model.predict([[90]])\nprint(f\"Prediksi harga rumah 90m\u00b2: {prediksi[0]:.2f} juta\")\n</code></pre> <p>\u2705 Cocok untuk memahami dasar ML! </p>"},{"location":"Python%20untuk%20Machine%20Learning/#3-menggunakan-dataset-dengan-pandas","title":"\ud83d\udcca 3. Menggunakan Dataset dengan Pandas","text":"<p>\ud83d\udccc Load dataset dan analisis data dengan Pandas </p> <pre><code>import pandas as pd\n\n# Load dataset\ndf = pd.read_csv(\"dataset.csv\")\nprint(df.head())  # Lihat 5 baris pertama\nprint(df.describe())  # Statistik data\n</code></pre> <p>\u2705 Gunakan Pandas untuk manipulasi dan eksplorasi data! </p>"},{"location":"Python%20untuk%20Machine%20Learning/#4-klasifikasi-gambar-dengan-tensorflow","title":"\ud83e\udde0 4. Klasifikasi Gambar dengan TensorFlow","text":"<p>\ud83d\udccc Gunakan TensorFlow untuk mengenali gambar (contoh: angka 0-9) </p> <pre><code>pip install tensorflow keras\n</code></pre> <pre><code>import tensorflow as tf\nfrom tensorflow import keras\n\n# Load dataset MNIST (angka tulisan tangan)\n(X_train, y_train), (X_test, y_test) = keras.datasets.mnist.load_data()\n\n# Normalisasi data\nX_train, X_test = X_train / 255.0, X_test / 255.0\n\n# Buat model Neural Network\nmodel = keras.Sequential([\n    keras.layers.Flatten(input_shape=(28, 28)),  \n    keras.layers.Dense(128, activation=\"relu\"),  \n    keras.layers.Dense(10, activation=\"softmax\")  \n])\n\n# Compile &amp; train model\nmodel.compile(optimizer=\"adam\", loss=\"sparse_categorical_crossentropy\", metrics=[\"accuracy\"])\nmodel.fit(X_train, y_train, epochs=5)\n\n# Evaluasi model\ntest_loss, test_acc = model.evaluate(X_test, y_test)\nprint(f\"Akurasi model: {test_acc:.2f}\")\n</code></pre> <p>\u2705 Bisa mengenali tulisan tangan angka 0-9 dengan AI! </p>"},{"location":"Python%20untuk%20Machine%20Learning/#kesimpulan","title":"\ud83c\udfaf Kesimpulan","text":"<p>\u2705 Buat Model Prediksi \u2192 Gunakan Linear Regression \u2705 Eksplorasi Data \u2192 Pakai Pandas untuk analisis dataset \u2705 Klasifikasi Gambar \u2192 Gunakan TensorFlow untuk AI Vision \u2705 Deep Learning \u2192 Buat Neural Network dengan Keras  </p> <p>Next: Python untuk Data Science! \ud83d\udcca</p>"},{"location":"Python%20untuk%20Otomasi/","title":"\ud83e\udd16 Python untuk Otomasi (Automation Scripting)","text":"<p>Python bisa digunakan untuk mengotomatisasi tugas-tugas membosankan, seperti mengelola file, mengisi formulir, atau bahkan mengendalikan browser! Ini sangat berguna untuk meningkatkan produktivitas.  </p>"},{"location":"Python%20untuk%20Otomasi/#1-mengelola-file-folder-secara-otomatis","title":"\ud83d\udcc2 1. Mengelola File &amp; Folder secara Otomatis","text":"<p>\ud83d\udccc Pindahkan, Ubah Nama, atau Hapus File dengan <code>os</code> &amp; <code>shutil</code> </p> <pre><code>import os\nimport shutil\n\n# Buat folder baru\nos.mkdir(\"folder_baru\")\n\n# Pindahkan file ke dalam folder\nshutil.move(\"dokumen.txt\", \"folder_baru/dokumen.txt\")\n\n# Hapus file\nos.remove(\"folder_baru/dokumen.txt\")\n\n# Hapus folder\nos.rmdir(\"folder_baru\")\n</code></pre> <p>\u2705 Berguna buat mengatur ribuan file secara otomatis! </p>"},{"location":"Python%20untuk%20Otomasi/#2-kirim-email-otomatis-dengan-python","title":"\ud83d\udce7 2. Kirim Email Otomatis dengan Python","text":"<p>\ud83d\udccc Gunakan <code>smtplib</code> untuk mengirim email </p> <pre><code>import smtplib\n\nemail_pengirim = \"emailkamu@gmail.com\"\nemail_penerima = \"target@gmail.com\"\npassword = \"password_kamu\"\n\nserver = smtplib.SMTP(\"smtp.gmail.com\", 587)\nserver.starttls()\nserver.login(email_pengirim, password)\n\npesan = \"Halo, ini email otomatis dari Python!\"\nserver.sendmail(email_pengirim, email_penerima, pesan)\n\nserver.quit()\nprint(\"Email terkirim!\")\n</code></pre> <p>\u26a0 Pastikan fitur \"Less Secure Apps\" aktif di Gmail sebelum mencoba! </p>"},{"location":"Python%20untuk%20Otomasi/#3-mengotomatisasi-browser-dengan-selenium","title":"\ud83c\udf10 3. Mengotomatisasi Browser dengan Selenium","text":"<p>\ud83d\udccc Instal Selenium &amp; WebDriver </p> <pre><code>pip install selenium\n</code></pre> <p>\ud83d\udccc Contoh: Login Otomatis ke Website </p> <pre><code>from selenium import webdriver\n\n# Buka browser\ndriver = webdriver.Chrome()\ndriver.get(\"https://www.website.com/login\")\n\n# Isi username &amp; password\ndriver.find_element(\"name\", \"username\").send_keys(\"user123\")\ndriver.find_element(\"name\", \"password\").send_keys(\"pass123\")\n\n# Klik tombol login\ndriver.find_element(\"id\", \"login-btn\").click()\n</code></pre> <p>\u2705 Cocok buat scraping data atau mengisi formulir otomatis! </p>"},{"location":"Python%20untuk%20Otomasi/#4-membaca-menulis-excel-secara-otomatis","title":"\ud83d\udcdd 4. Membaca &amp; Menulis Excel secara Otomatis","text":"<p>\ud83d\udccc Gunakan <code>openpyxl</code> untuk membaca/mengedit file Excel </p> <pre><code>import openpyxl\n\n# Buka file Excel\nwb = openpyxl.load_workbook(\"data.xlsx\")\nsheet = wb.active\n\n# Ambil data dari sel\nprint(sheet[\"A1\"].value)\n\n# Tulis data ke Excel\nsheet[\"B2\"] = \"Python Automation\"\nwb.save(\"data.xlsx\")\n</code></pre> <p>\u2705 Berguna buat otomatisasi laporan &amp; data entry! </p>"},{"location":"Python%20untuk%20Otomasi/#kesimpulan","title":"\ud83c\udfaf Kesimpulan","text":"<p>\u2705 <code>os &amp; shutil</code> \u2192 Buat mengelola file &amp; folder \u2705 <code>smtplib</code> \u2192 Buat kirim email otomatis \u2705 <code>selenium</code> \u2192 Buat mengontrol browser otomatis \u2705 <code>openpyxl</code> \u2192 Buat baca/tulis file Excel otomatis  </p> <p>Next: Python untuk Cybersecurity! \ud83d\udd12</p>"},{"location":"Security%20dalam%20Python%20Web%20Dev/","title":"Security dalam Python Web Dev","text":""},{"location":"Security%20dalam%20Python%20Web%20Dev/#security-dalam-python-web-development","title":"\ud83d\udd10 Security dalam Python Web Development","text":""},{"location":"Security%20dalam%20Python%20Web%20Dev/#kenapa-security-itu-penting","title":"\ud83d\ude30 Kenapa Security Itu Penting?","text":"<p>Satu celah kecil = satu kerugian besar \ud83d\udcb8 Kalau aplikasi kamu bocor: - Data user bisa dicuri \ud83d\ude31 - Bisa kena deface / DDoS \ud83d\ude35 - Bisa jadi zombie buat botnet \ud83d\ude10</p> <p>Pokoknya jangan jadi developer yang bikin website bocor kayak ember bolong \ud83e\udea3</p>"},{"location":"Security%20dalam%20Python%20Web%20Dev/#1-sql-injection","title":"\ud83d\udea8 1. SQL Injection","text":"<p>Masalah: Query langsung dari input user Solusi: Gunakan parameterized query / ORM</p> <p>\u274c Salah:</p> <pre><code>cursor.execute(f\"SELECT * FROM users WHERE username = '{username}'\")\n</code></pre> <p>\u2705 Benar:</p> <pre><code>cursor.execute(\"SELECT * FROM users WHERE username = %s\", (username,))\n</code></pre> <p>ORM kayak SQLAlchemy atau Django ORM lebih aman by default.</p>"},{"location":"Security%20dalam%20Python%20Web%20Dev/#2-xss-cross-site-scripting","title":"\ud83d\udcbb 2. XSS (Cross Site Scripting)","text":"<p>Masalah: Input user ditampilkan mentah-mentah Solusi: Escape output, validasi input</p> <p>Gunakan template engine (Jinja2, Django template) karena otomatis escape HTML.</p> <pre><code>{{ user_input }}  &lt;!-- aman, auto escape --&gt;\n</code></pre>"},{"location":"Security%20dalam%20Python%20Web%20Dev/#3-csrf-cross-site-request-forgery","title":"\ud83e\udd78 3. CSRF (Cross Site Request Forgery)","text":"<p>Masalah: User login disuruh klik link jahat Solusi: Gunakan CSRF token</p> <p>Contoh di Flask-WTF atau Django:</p> <pre><code>&lt;input type=\"hidden\" name=\"csrf_token\" value=\"{{ csrf_token() }}\"&gt;\n</code></pre>"},{"location":"Security%20dalam%20Python%20Web%20Dev/#4-authentication-authorization","title":"\ud83d\udd11 4. Authentication &amp; Authorization","text":"<ul> <li>Gunakan JWT atau session untuk autentikasi</li> <li>Jangan simpan password langsung!</li> <li>Gunakan bcrypt, argon2, atau PBKDF2</li> </ul> <p>Contoh hashing pakai bcrypt:</p> <pre><code>import bcrypt\n\nhashed = bcrypt.hashpw(password.encode(), bcrypt.gensalt())\nbcrypt.checkpw(password_attempt.encode(), hashed)\n</code></pre>"},{"location":"Security%20dalam%20Python%20Web%20Dev/#5-https-wajib","title":"\ud83d\udd10 5. HTTPS Wajib!","text":"<ul> <li>Jangan pernah deploy pakai HTTP doang</li> <li>Gunakan Let's Encrypt untuk sertifikat SSL gratis</li> <li>Akses API = selalu lewat HTTPS</li> </ul>"},{"location":"Security%20dalam%20Python%20Web%20Dev/#6-error-handling-aman","title":"\ud83e\uddef 6. Error Handling Aman","text":"<p>\u274c Salah:</p> <pre><code>return f\"Error: {e}\"\n</code></pre> <p>\u2705 Benar:</p> <pre><code>logging.error(e)\nreturn \"Terjadi kesalahan. Coba lagi nanti.\"\n</code></pre> <p>Jangan kasih clue internal ke attacker (nama tabel, trace, dll.)</p>"},{"location":"Security%20dalam%20Python%20Web%20Dev/#7-secure-header-cors","title":"\ud83d\udd12 7. Secure Header &amp; CORS","text":"<p>Gunakan middleware atau library untuk: - Menambahkan header seperti <code>X-Content-Type-Options</code>, <code>Content-Security-Policy</code>, dll. - Mengatur CORS agar hanya domain tertentu yang boleh akses API</p> <p>Contoh di FastAPI:</p> <pre><code>from fastapi.middleware.cors import CORSMiddleware\n\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"https://yourdomain.com\"],\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n</code></pre>"},{"location":"Security%20dalam%20Python%20Web%20Dev/#8-security-testing-tools","title":"\ud83e\uddea 8. Security Testing Tools","text":"Tool Fungsi <code>bandit</code> Scan celah security di Python <code>OWASP ZAP</code> Uji keamanan web app <code>safety</code> Cek package yang rentan <pre><code>pip install bandit\nbandit -r src/\n</code></pre>"},{"location":"Security%20dalam%20Python%20Web%20Dev/#best-practices-security","title":"\u2705 Best Practices Security","text":"<ul> <li>Jangan hardcode secrets (pakai <code>.env</code>!)</li> <li>Gunakan library yang selalu di-maintain</li> <li>Selalu update dependency (<code>pip list --outdated</code>)</li> <li>Logging error, tapi jangan bocorin info sensitif</li> <li>Pakai 2FA di admin panel (kalau ada)</li> </ul>"},{"location":"Security%20dalam%20Python%20Web%20Dev/#kesimpulan","title":"\ud83d\udccc Kesimpulan","text":"<p>Security bukan fitur tambahan, itu pondasi. Lebih baik capek sedikit di awal, daripada nangis tengah malam karena server dibajak \ud83e\udde0\ud83d\udcbb\ud83d\udd25</p>"},{"location":"Security%20dalam%20Python%20Web%20Dev/#tambahan-ke-mkdocsyml","title":"Tambahan ke <code>mkdocs.yml</code>:","text":"<pre><code>  - Security dalam Python Web Dev: Security dalam Python Web Dev.md\n</code></pre> <p>Siap lanjut? Next bisa ke: - \u2699\ufe0f Performance Tuning &amp; Profiling - \ud83e\uddd1\u200d\ud83d\udcbb Python untuk Automation &amp; Scripting - \ud83e\udd16 Python untuk Data Science  </p> <p>Pilih topik selanjutnya, broh! \ud83d\udc0d\ud83d\ude80</p>"},{"location":"Struktur%20Data/","title":"\ud83e\udde0 Struktur Data Python (Level Intermediate)","text":"<p>Struktur data di Python membantu kita menyimpan dan mengelola data dengan lebih efisien. Python punya 4 struktur data utama:  </p> <ol> <li>List \u2192 Kumpulan data yang bisa diubah (mutable)  </li> <li>Tuple \u2192 Mirip list, tapi tidak bisa diubah (immutable)  </li> <li>Set \u2192 Kumpulan unik, tanpa duplikasi  </li> <li>Dictionary \u2192 Kumpulan data dengan format <code>key-value</code> </li> </ol>"},{"location":"Struktur%20Data/#1-list-daftar-elemen-yang-bisa-diubah","title":"\ud83d\udccc 1. List (Daftar Elemen yang Bisa Diubah)","text":"<p>List digunakan untuk menyimpan beberapa item dalam satu variabel. Bisa berisi berbagai tipe data.  </p>"},{"location":"Struktur%20Data/#membuat-list","title":"\ud83d\udd39 Membuat List","text":"<pre><code>angka = [1, 2, 3, 4, 5]\nbuah = [\"apel\", \"mangga\", \"jeruk\"]\ncampuran = [10, \"Python\", True]\n</code></pre>"},{"location":"Struktur%20Data/#operasi-dasar-list","title":"\ud83d\udd39 Operasi Dasar List","text":"<pre><code>print(angka[0])      # Mengakses elemen pertama -&gt; 1\nprint(buah[-1])      # Mengakses elemen terakhir -&gt; \"jeruk\"\n\nbuah.append(\"pisang\")  # Menambah item\nbuah.remove(\"apel\")    # Menghapus item\nangka.insert(2, 99)    # Menyisipkan 99 di indeks ke-2\nbuah.pop()             # Menghapus item terakhir\nbuah.sort()            # Mengurutkan list\n</code></pre> <p>\ud83d\udccc Contoh Penggunaan List </p> <pre><code># Looping List\nfor item in buah:\n    print(item)\n</code></pre>"},{"location":"Struktur%20Data/#2-tuple-mirip-list-tapi-tidak-bisa-diubah","title":"\ud83d\udd17 2. Tuple (Mirip List, Tapi Tidak Bisa Diubah)","text":"<p>Tuple berguna kalau kita ingin data tetap konstan dan tidak berubah.  </p>"},{"location":"Struktur%20Data/#membuat-tuple","title":"\ud83d\udd39 Membuat Tuple","text":"<pre><code>angka = (1, 2, 3, 4, 5)\nwarna = (\"merah\", \"hijau\", \"biru\")\n</code></pre>"},{"location":"Struktur%20Data/#operasi-tuple","title":"\ud83d\udd39 Operasi Tuple","text":"<pre><code>print(angka[0])  # 1\nprint(len(warna))  # 3\n\n# Tuple tidak bisa diubah, tapi bisa diubah ke list dulu\nwarna_list = list(warna)\nwarna_list.append(\"kuning\")\nwarna = tuple(warna_list)\nprint(warna)  # ('merah', 'hijau', 'biru', 'kuning')\n</code></pre>"},{"location":"Struktur%20Data/#3-set-kumpulan-unik-tanpa-duplikasi","title":"\ud83d\udd25 3. Set (Kumpulan Unik, Tanpa Duplikasi)","text":"<p>Set digunakan jika kita butuh data unik tanpa elemen duplikat.  </p>"},{"location":"Struktur%20Data/#membuat-set","title":"\ud83d\udd39 Membuat Set","text":"<pre><code>angka = {1, 2, 3, 3, 4, 5, 5}\nprint(angka)  # {1, 2, 3, 4, 5} -&gt; Duplikat dihapus\n</code></pre>"},{"location":"Struktur%20Data/#operasi-set","title":"\ud83d\udd39 Operasi Set","text":"<pre><code>angka.add(6)       # Menambahkan item\nangka.remove(3)    # Menghapus item\nprint(angka)       # {1, 2, 4, 5, 6}\n\n# Operasi Set\ngenap = {2, 4, 6, 8}\nganjil = {1, 3, 5, 7}\n\nprint(genap | ganjil)  # Gabungan (union)\nprint(genap &amp; ganjil)  # Irisan (intersection)\nprint(genap - {2, 4})  # Selisih\n</code></pre>"},{"location":"Struktur%20Data/#4-dictionary-data-key-value","title":"\ud83d\uddc2\ufe0f 4. Dictionary (Data Key-Value)","text":"<p>Dictionary (<code>dict</code>) menyimpan data dalam format <code>key-value</code>, seperti JSON.  </p>"},{"location":"Struktur%20Data/#membuat-dictionary","title":"\ud83d\udd39 Membuat Dictionary","text":"<pre><code>mahasiswa = {\n    \"nama\": \"Budi\",\n    \"umur\": 20,\n    \"jurusan\": \"Informatika\"\n}\n</code></pre>"},{"location":"Struktur%20Data/#operasi-dictionary","title":"\ud83d\udd39 Operasi Dictionary","text":"<pre><code>print(mahasiswa[\"nama\"])   # Mengakses nilai -&gt; \"Budi\"\n\nmahasiswa[\"umur\"] = 21     # Mengubah nilai\nmahasiswa[\"universitas\"] = \"ITB\"  # Menambah key baru\ndel mahasiswa[\"jurusan\"]   # Menghapus key\n\nprint(mahasiswa.keys())    # Melihat semua key\nprint(mahasiswa.values())  # Melihat semua nilai\nprint(mahasiswa.items())   # Melihat semua pasangan key-value\n</code></pre> <p>\ud83d\udccc Looping Dictionary </p> <pre><code>for key, value in mahasiswa.items():\n    print(f\"{key}: {value}\")\n</code></pre>"},{"location":"Struktur%20Data/#kesimpulan","title":"\ud83c\udfaf Kesimpulan","text":"<p>\u2705 List \u2192 Bisa diubah, cocok untuk menyimpan banyak item yang bisa diurutkan. \u2705 Tuple \u2192 Tidak bisa diubah, cocok untuk data konstan. \u2705 Set \u2192 Tidak ada duplikasi, cocok untuk data unik. \u2705 Dictionary \u2192 Data dengan pasangan <code>key-value</code>, mirip JSON.  </p> <p>Next: Manipulasi String &amp; File Handling! \ud83d\ude80</p>"},{"location":"Unit%20Testing%20dan%20TDD/","title":"Unit Testing dan TDD","text":""},{"location":"Unit%20Testing%20dan%20TDD/#unit-testing-dan-tdd-test-driven-development","title":"\ud83d\udcc4 Unit Testing dan TDD (Test-Driven Development)","text":""},{"location":"Unit%20Testing%20dan%20TDD/#apa-itu-unit-testing","title":"\ud83e\uddea Apa Itu Unit Testing?","text":"<p>Unit testing adalah proses menguji bagian terkecil dari kode (biasanya fungsi atau metode) secara terpisah untuk memastikan mereka bekerja sesuai harapan.</p> <p>\u201cNgetes fungsi kayak nyicipin masakan sebelum disajikan ke bos \ud83d\ude0e\u201d</p>"},{"location":"Unit%20Testing%20dan%20TDD/#kenapa-unit-testing-penting","title":"\ud83d\udee0\ufe0f Kenapa Unit Testing Penting?","text":"<ul> <li>Menangkap bug lebih awal (sebelum jadi drama produksi)</li> <li>Bikin refactor lebih aman</li> <li>Jadi dokumentasi hidup</li> <li>Nambah kepercayaan diri sebelum deploy \ud83d\ude80</li> </ul>"},{"location":"Unit%20Testing%20dan%20TDD/#dasar-unit-testing-dengan-unittest","title":"\ud83d\udd27 Dasar Unit Testing dengan <code>unittest</code>","text":"<p>Python punya modul built-in bernama <code>unittest</code>. Contoh dasar:</p> <pre><code>import unittest\n\ndef tambah(a, b):\n    return a + b\n\nclass TestTambah(unittest.TestCase):\n    def test_tambah_positif(self):\n        self.assertEqual(tambah(1, 2), 3)\n\nif __name__ == '__main__':\n    unittest.main()\n</code></pre> <p>Jalankan:</p> <pre><code>python test_namafile.py\n</code></pre>"},{"location":"Unit%20Testing%20dan%20TDD/#apa-itu-tdd","title":"\ud83e\udde8 Apa Itu TDD?","text":"<p>Test-Driven Development (TDD) adalah gaya ngoding di mana kita nulis test sebelum nulis kode.</p>"},{"location":"Unit%20Testing%20dan%20TDD/#siklus-tdd","title":"\ud83d\udd01 Siklus TDD:","text":"<ol> <li>\ud83d\udd34 Red \u2013 Tulis test yang gagal</li> <li>\ud83d\udfe2 Green \u2013 Tulis kode minimal agar test lulus</li> <li>\ud83d\udee0\ufe0f Refactor \u2013 Rapikan kode tanpa bikin test gagal</li> </ol>"},{"location":"Unit%20Testing%20dan%20TDD/#contoh-sederhana-tdd","title":"\ud83e\uddea Contoh Sederhana TDD:","text":"<pre><code># Step 1: Test dulu\ndef test_faktor_dari_angka():\n    assert faktor(6) == [1, 2, 3, 6]  # Gagal dulu\n\n# Step 2: Implementasi\ndef faktor(n):\n    return [i for i in range(1, n+1) if n % i == 0]\n</code></pre>"},{"location":"Unit%20Testing%20dan%20TDD/#mocking-palsukan-hal-yang-ribet","title":"\ud83e\ude84 Mocking: Palsukan Hal yang Ribet","text":"<p>Gunakan <code>unittest.mock</code> buat nge-mock API atau database:</p> <pre><code>from unittest.mock import Mock\n\napi = Mock()\napi.get_data.return_value = {\"data\": 123}\n\nassert api.get_data()[\"data\"] == 123\n</code></pre>"},{"location":"Unit%20Testing%20dan%20TDD/#alternatif-pytest-simple-banget","title":"\ud83d\udd25 Alternatif: Pytest (Simple Banget)","text":"<p>Lebih clean daripada <code>unittest</code>, banyak dipakai developer modern.</p> <pre><code>def tambah(a, b):\n    return a + b\n\ndef test_tambah():\n    assert tambah(3, 4) == 7\n</code></pre> <p>Jalankan:</p> <pre><code>pytest\n</code></pre>"},{"location":"Unit%20Testing%20dan%20TDD/#cek-seberapa-banyak-kode-yang-dites-coverage","title":"\ud83d\udcca Cek Seberapa Banyak Kode Yang Dites (Coverage)","text":"<pre><code>pip install coverage\ncoverage run -m pytest\ncoverage report\n</code></pre>"},{"location":"Unit%20Testing%20dan%20TDD/#best-practices","title":"\u2705 Best Practices","text":"<ul> <li>Gunakan nama test yang deskriptif: <code>test_login_dengan_password_salah()</code></li> <li>Pisahkan file test dari file utama (<code>test_*.py</code>)</li> <li>Test logic penting, bukan semua baris</li> <li>Gunakan CI/CD untuk otomatisasi test</li> <li>Jangan takut nulis test sebelum coding (TDD FTW!)</li> </ul>"},{"location":"Unit%20Testing%20dan%20TDD/#kesimpulan","title":"\ud83d\udccc Kesimpulan","text":"<p>Unit testing dan TDD bukan cuma buat perusahaan gede, tapi buat semua developer yang ingin ngoding tanpa drama di akhir sprint. Tambahin testing di habit coding kamu, kayak sarapan pagi \u2014 biar sehat dan kuat \ud83d\udcaa\ud83d\udc0d</p> <p>Kalau kamu mau, aku bisa langsung buatin juga file markdown-nya dalam bentuk file <code>.md</code> biar tinggal kamu taruh di <code>docs/</code>. Mau dibuatkan file-nya juga atau kamu copy manual?</p>"},{"location":"Variabel%20dan%20Tipe%20Data/","title":"\ud83d\udc0d Sintaks Dasar Python","text":"<p>Setelah berhasil install Python dan menjalankan Hello World, sekarang kita masuk ke dasar-dasar coding di Python. Ini penting biar nanti lo bisa ngoding dengan lancar. \ud83d\ude80  </p>"},{"location":"Variabel%20dan%20Tipe%20Data/#1-variabel-tipe-data","title":"\ud83c\udfaf 1. Variabel &amp; Tipe Data","text":"<p>Variabel = tempat buat nyimpen data. Python nggak perlu deklarasi tipe data secara eksplisit, karena dia dynamic typing (langsung tau tipe datanya dari nilai yang dikasih).  </p> <p>\ud83d\udd39 Contoh Variabel &amp; Tipe Data </p> <pre><code># String (teks)\nnama = \"Python\"\n\n# Integer (angka bulat)\numur = 25\n\n# Float (angka desimal)\nberat = 65.5\n\n# Boolean (True/False)\nis_python_easy = True\n\n# List (daftar, bisa diubah)\nhobi = [\"ngoding\", \"main game\", \"nonton anime\"]\n\n# Tuple (mirip list, tapi gak bisa diubah)\nkoordinat = (10, 20)\n\n# Dictionary (mirip JSON, key-value pair)\ndata_mahasiswa = {\n    \"nama\": \"Budi\",\n    \"umur\": 20,\n    \"jurusan\": \"Informatika\"\n}\n\n# Set (kumpulan unik, gak ada duplikat)\nangka_unik = {1, 2, 3, 4, 4, 5}  # {1, 2, 3, 4, 5}\n\nprint(nama, umur, berat, is_python_easy)\n</code></pre> <p>\ud83d\udccc Catatan: - String pakai kutip <code>\"\"</code> atau <code>''</code>. - List <code>[ ]</code> bisa diubah, sedangkan Tuple <code>( )</code> nggak bisa diubah. - Dictionary <code>{}</code> punya pasangan key-value.  </p>"},{"location":"Variabel%20dan%20Tipe%20Data/#2-operator-aritmatika-perbandingan-logika","title":"\u2795 2. Operator (Aritmatika, Perbandingan, Logika)","text":""},{"location":"Variabel%20dan%20Tipe%20Data/#a-operator-aritmatika","title":"\ud83d\udd22 A. Operator Aritmatika","text":"Operator Fungsi Contoh <code>+</code> Penjumlahan <code>5 + 3  # Hasil: 8</code> <code>-</code> Pengurangan <code>10 - 4  # Hasil: 6</code> <code>*</code> Perkalian <code>6 * 7  # Hasil: 42</code> <code>/</code> Pembagian <code>10 / 2  # Hasil: 5.0</code> <code>//</code> Pembagian Bulat <code>10 // 3  # Hasil: 3</code> <code>%</code> Modulus (Sisa Bagi) <code>10 % 3  # Hasil: 1</code> <code>**</code> Pangkat <code>2 ** 3  # Hasil: 8</code> <p>\ud83d\udd39 Contoh Penggunaan </p> <pre><code>a = 10\nb = 3\n\nprint(a + b)  # 13\nprint(a - b)  # 7\nprint(a * b)  # 30\nprint(a / b)  # 3.3333\nprint(a // b) # 3\nprint(a % b)  # 1\nprint(a ** b) # 1000 (10^3)\n</code></pre>"},{"location":"Variabel%20dan%20Tipe%20Data/#b-operator-perbandingan","title":"\ud83d\udd0d B. Operator Perbandingan","text":"Operator Fungsi Contoh <code>==</code> Sama dengan <code>5 == 5  # True</code> <code>!=</code> Tidak sama dengan <code>5 != 3  # True</code> <code>&gt;</code> Lebih besar <code>7 &gt; 5  # True</code> <code>&lt;</code> Lebih kecil <code>2 &lt; 3  # True</code> <code>&gt;=</code> Lebih besar atau sama <code>5 &gt;= 5  # True</code> <code>&lt;=</code> Lebih kecil atau sama <code>4 &lt;= 6  # True</code> <p>\ud83d\udd39 Contoh Penggunaan </p> <pre><code>x = 10\ny = 5\n\nprint(x &gt; y)  # True\nprint(x &lt; y)  # False\nprint(x == 10)  # True\nprint(x != 5)  # True\n</code></pre>"},{"location":"Variabel%20dan%20Tipe%20Data/#c-operator-logika","title":"\ud83e\udd2f C. Operator Logika","text":"Operator Fungsi Contoh <code>and</code> True jika kedua kondisi True <code>(5 &gt; 3) and (10 &gt; 8)  # True</code> <code>or</code> True jika salah satu kondisi True <code>(5 &gt; 3) or (10 &lt; 8)  # True</code> <code>not</code> Membalik kondisi <code>not (5 &gt; 3)  # False</code> <p>\ud83d\udd39 Contoh Penggunaan </p> <pre><code>a = True\nb = False\n\nprint(a and b)  # False\nprint(a or b)   # True\nprint(not a)    # False\n</code></pre>"},{"location":"Variabel%20dan%20Tipe%20Data/#3-input-output-ngobrol-sama-user","title":"\ud83d\udde3\ufe0f 3. Input &amp; Output (Ngobrol Sama User)","text":""},{"location":"Variabel%20dan%20Tipe%20Data/#a-input-menerima-data-dari-user","title":"\ud83d\udce5 A. Input (Menerima Data dari User)","text":"<p>Gunakan <code>input()</code> buat menerima data dari user.  </p> <pre><code>nama = input(\"Masukkan nama kamu: \")\numur = int(input(\"Masukkan umur kamu: \"))  # Convert ke integer\n\nprint(\"Halo,\", nama, \"! Umur kamu\", umur, \"tahun.\")\n</code></pre> <p>\ud83d\udccc Catatan: - <code>input()</code> selalu mengembalikan string. Kalau mau angka, harus dikonversi pakai <code>int()</code> atau <code>float()</code>.  </p>"},{"location":"Variabel%20dan%20Tipe%20Data/#b-output-menampilkan-data","title":"\ud83d\udce4 B. Output (Menampilkan Data)","text":"<p>Gunakan <code>print()</code> buat menampilkan teks atau hasil perhitungan.  </p> <pre><code>nama = \"Adit\"\numur = 20\n\n# Cara 1: Pakai Koma (,) -&gt; Bisa berbagai tipe data\nprint(\"Nama:\", nama, \"Umur:\", umur)\n\n# Cara 2: Pakai f-string (Rekomendasi)\nprint(f\"Nama: {nama}, Umur: {umur}\")\n\n# Cara 3: Pakai format()\nprint(\"Nama: {}, Umur: {}\".format(nama, umur))\n</code></pre> <p>\ud83d\udccc f-string (<code>f\"...\"</code>) adalah cara paling simpel dan rapi buat format teks di Python.  </p>"},{"location":"Variabel%20dan%20Tipe%20Data/#kesimpulan","title":"\ud83c\udfaf Kesimpulan","text":"<p>\u2705 Variabel &amp; Tipe Data \u2013 Python otomatis menentukan tipe data. \u2705 Operator \u2013 Aritmatika, Perbandingan, dan Logika buat manipulasi data. \u2705 Input &amp; Output \u2013 <code>input()</code> buat menerima data, <code>print()</code> buat menampilkan data.  </p> <p>Udah siap lanjut ke kontrol alur program? \ud83d\udd25 Next: If-Else &amp; Looping di Python! \ud83d\ude80</p>"}]}